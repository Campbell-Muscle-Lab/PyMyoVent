{"0": {
    "doc": "MyoSim",
    "title": "MyoSim",
    "content": ". | Overview | Theory | Parameters | . ",
    "url": "http://localhost:4000/pages/modules/MyoSim/background.html",
    "relUrl": "/pages/modules/MyoSim/background.html"
  },"1": {
    "doc": "MyoSim",
    "title": "Overview",
    "content": "MyoSim is software that Ken Campbell originally wrote to simulate the mechanical properties of half-sarcomeres. It extends Huxley-based cross-bridge distribution techniques with Ca2+ activation and cooperative effects. This repository contains an implementation of MyoSim written in Python. Other versions of MyoSim have been written in C++ and MATLAB. None of the versions are completely interchangeable. All have strengths and weaknesses. The C++ code is the fastest, but also (by far) the most complicated. ",
    "url": "http://localhost:4000/pages/modules/MyoSim/background.html#overview",
    "relUrl": "/pages/modules/MyoSim/background.html#overview"
  },"2": {
    "doc": "MyoSim",
    "title": "Theory",
    "content": "MyoSim calculates the force produced by populations of cycling cross-bridges by tracking the number of myosin heads attached to actin with different strains. This approach was originally developed by Andrew Huxley. The techniques required to simulate cross-bridge distributions using a computer (solving differential equations and interpolation) were described in some of Ken Campbell’s earlier papers. | A cross-bridge mechanism can explain the thixotropic short-range elastic component of relaxed frog skeletal muscle | A thixotropic effect in contracting rabbit psoas muscle: prior movement reduces the initial tension response to stretch | History-dependent mechanical properties of permeabilized rat soleus muscle fibers | . The models described in these papers only simulated half-sarcomeres held at a fixed level of activation (i.e. they were not sensitive to the intracellular Ca2+ concentration). MyoSim overcame this limitation by coupling cycling cross-bridges to a population of binding sites that were activated by Ca2+ and cooperativity. The original paper explained the theory and showed how the software could be used to simulate myosin heads cycling through a variety of different kinetic schemes. | Dynamic coupling of regulated binding sites and cycling myosin heads in striated muscle | . Additional papers building on this technique include: . | Compliance Accelerates Relaxation in Muscle by Allowing Myosin Heads to Move Relative to Actin | Myocardial relaxation is accelerated by fast stretch, not reduced afterload | . MyoSim can also simulate dynamic transitions within the thick filament (OFF to ON states of myosin). The first paper investigating these transitions was: . | Force-Dependent Recruitment from the Myosin Off State Contributes to Length-Dependent Activation | . ",
    "url": "http://localhost:4000/pages/modules/MyoSim/background.html#theory",
    "relUrl": "/pages/modules/MyoSim/background.html#theory"
  },"3": {
    "doc": "MyoSim",
    "title": "Parameters",
    "content": "\"half_sarcomere\":{ \"max_rate\": [5000,\"s^-1\"], \"temperature\": [288, \"Kelvin\"], \"cb_number_density\": [6.9e16, \"number of cb's/m^2\"], \"initial_hs_length\": [900, \"nm\"], \"ATPase_activation\":[false], \"delta_energy\":[70,\"kJ/mol\"], \"avagadro_number\":[6.02e23,\"mol^-1\"], \"reference_hs_length\":[1100,\"nm\"], \"myofilaments\":{ \"kinetic_scheme\": [\"3state_with_SRX\"], \"k_1\": [2,\"s^-1\"], \"k_force\": [1e-3, \"(N^-1)(m^2)\"], \"k_2\": [200, \"s^-1\"], \"k_3\": [110, \"(nm^-1)(s^-1)\"], \"k_4_0\": [200, \"s^-1\"], \"k_4_1\": [0.3, \"nm^-4\"], \"k_cb\": [0.001, \"N*m^-1\"], \"x_ps\": [5, \"nm\"], \"k_on\": [6e8, \"(M^-1)(s^-1)\"], \"k_off\": [200, \"s^-1\"], \"k_coop\": [5], \"bin_min\": [-10, \"nm\"], \"bin_max\": [10, \"nm\"], \"bin_width\": [1, \"nm\"], \"filament_compliance_factor\": [0.5], \"thick_filament_length\": [815, \"nm\"], \"thin_filament_length\": [1120, \"nm\"], \"bare_zone_length\": [80, \"nm\"], \"k_falloff\": [0.0024], \"passive_mode\": [\"exponential\"], \"passive_exp_sigma\": [500], \"passive_exp_L\": [80], \"passive_l_slack\": [900, \"nm\"] }, \"membranes\": { \"kinetic_scheme\": [\"Ten_Tusscher_2004\"], \"simple_2_compartment\":{ \"Ca_content\": [1e-3], \"k_leak\": [2e-3], \"k_act\": [5e-2], \"k_serca\": [10.0] }, \"Ten_Tusscher_2004\":{ \"g_to_factor\": [1], \"g_Kr_factor\": [1], \"g_Ks_factor\": [1], \"Ca_a_rel_factor\": [1], \"Ca_V_leak_factor\": [1], \"Ca_Vmax_up_factor\": [1], \"g_CaL_factor\": [1] } } }, . ",
    "url": "http://localhost:4000/pages/modules/MyoSim/background.html#parameters",
    "relUrl": "/pages/modules/MyoSim/background.html#parameters"
  },"4": {
    "doc": "Baroreceptor",
    "title": "Baroreceptor",
    "content": "With this demo you can test how the baroreceptor reflex module can regulate mean arterial pressure towards the user-defined setpoint level by regulating the model parameters from molecular to organ levels under either normal or altered ventricular loadings. ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor.html",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor.html"
  },"5": {
    "doc": "Baroreceptor (normal loading)",
    "title": "Baroreceptor (normal loading)",
    "content": ". | Instruction | Note | Instruction file | Outputs | . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_normal.html",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_normal.html"
  },"6": {
    "doc": "Baroreceptor (normal loading)",
    "title": "Instruction",
    "content": ". | Lunch Anaconda prompt. | Navigate to Python_code folder in PyMyoVent’s repository directory: . | $ cd path_to_PyMyoVent_repo\\Python_code | . | Use the following command to run the Baroreceptor demo with no perturbation applied to the system. | $ python PyMyoVent.py run_defined_model ..\\demo_files\\baroreceptor\\baroreceptor_model.json | After a few minutes the simulation would be finished. | . | . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_normal.html#instruction",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_normal.html#instruction"
  },"7": {
    "doc": "Baroreceptor (normal loading)",
    "title": "Note",
    "content": ". | The baroreceptor module starts to regulate the arterial pressure at \"start_index\":[5000], which can be modified by the user. | The baroreceptor module tries to maintain the mean arterial pressure at 87.7 mm Hg, as a normal level for healthy human, by regulating heart rate, myofilaments contractility, intracellular Ca handling, and vascular tone. | This model uses an electrophysiology model proposed by ten Tusscher. | The ventricular loading is normal and no perturbation has applied. | . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_normal.html#note",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_normal.html#note"
  },"8": {
    "doc": "Baroreceptor (normal loading)",
    "title": "Instruction file",
    "content": ". | The instruction file is written in JSON format and is located at path_to_PyMyoVent_repo\\demo_files\\baroreceptor\\baroreceptor_model.json. | . { \"output_parameters\": { \"input_file\": [\"..\\\\temp\\\\baroreceptor\\\\baroreceptor.json\"], \"csv_file\": [\"..\\\\temp\\\\baroreceptor\\\\baroreceptor.csv\"], \"summary_figure\": [\"..\\\\temp\\\\baroreceptor\\\\baroreceptor_summary.png\"], \"pv_figure\": [\"..\\\\temp\\\\baroreceptor\\\\baroreceptor_pv.png\"], \"flows_figure\": [\"..\\\\temp\\\\baroreceptor\\\\baroreceptor_flows.png\"], \"hs_fluxes_figure\": [\"..\\\\temp\\\\baroreceptor\\\\baroreceptor_hs_fluxes.png\"], \"baro_figure\": [\"..\\\\temp\\\\baroreceptor\\\\baroreceptor_baro.png\"], \"circulatory\": [\"..\\\\temp\\\\baroreceptor\\\\baroreceptor_circulation.png\"] }, \"system_control\":{ \"simulation\":{ \"no_of_time_points\": [70000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [0.857,\"s\"] }, \"baroreceptor\":{ \"start_index\":[5000], \"N_t\":[5000], \"afferent\": { \"b_max\": [2], \"b_min\": [0], \"S\": [0.067,\"mmHg\"], \"P_set\": [87.7,\"mmHg\"] }, \"efferent\":{ \"heart_period\":{ \"G_T\": [0.07] }, \"k_1\":{ \"G_k1\": [-0.1] }, \"k_on\":{ \"G_k_on\":[0.08] }, \"ca_uptake\":{ \"G_up\": [-0.05] }, \"g_cal\":{ \"G_gcal\": [-0.07] }, \"c_venous\":{ \"G_c_venous\": [0.1] }, \"r_arteriolar\":{ \"G_r_arteriolar\": [-0.1] } } } }, \"circulation\":{ \"no_of_compartments\": [6], \"blood\":{ \"volume\":[5,\"liters\"] }, \"aorta\":{ \"resistance\": [40,\"s\"], \"compliance\": [0.0004,\"liter_per_mmHg\"] }, \"arteries\":{ \"resistance\": [80,\"s\"], \"compliance\": [0.0009,\"liter_per_mmHg\"] }, \"arterioles\":{ \"resistance\": [400,\"s\"], \"compliance\": [0.005,\"liter_per_mmHg\"] }, \"capillaries\":{ \"resistance\": [340,\"s\"], \"compliance\": [0.03,\"liter_per_mmHg\"] }, \"veins\":{ \"resistance\": [330,\"s\"], \"compliance\": [0.5,\"liter_per_mmHg\"] }, \"ventricle\":{ \"resistance\": [10,\"s\"], \"wall_volume\": [0.1,\"liters\"], \"slack_volume\": [0.08,\"liters\"], \"wall_density\": [1055,\"g/l\"], \"body_surface_area\": [1.90,\"m^2\"] } }, \"half_sarcomere\":{ \"max_rate\": [5000,\"s^-1\"], \"temperature\": [288, \"Kelvin\"], \"cb_number_density\": [6.9e16, \"number of cb's/m^2\"], \"initial_hs_length\": [900, \"nm\"], \"ATPase_activation\":[false], \"delta_energy\":[70,\"kJ/mol\"], \"avagadro_number\":[6.02e23,\"mol^-1\"], \"reference_hs_length\":[1100,\"nm\"], \"myofilaments\":{ \"kinetic_scheme\": [\"3state_with_SRX\"], \"k_1\": [2,\"s^-1\"], \"k_force\": [0.6e-3, \"(N^-1)(m^2)\"], \"k_2\": [200, \"s^-1\"], \"k_3\": [100, \"(nm^-1)(s^-1)\"], \"k_4_0\": [200, \"s^-1\"], \"k_4_1\": [0.3, \"nm^-4\"], \"k_cb\": [0.001, \"N*m^-1\"], \"x_ps\": [5, \"nm\"], \"k_on\": [5e8, \"(M^-1)(s^-1)\"], \"k_off\": [200, \"s^-1\"], \"k_coop\": [5], \"bin_min\": [-10, \"nm\"], \"bin_max\": [10, \"nm\"], \"bin_width\": [1, \"nm\"], \"filament_compliance_factor\": [0.5], \"thick_filament_length\": [815, \"nm\"], \"thin_filament_length\": [1120, \"nm\"], \"bare_zone_length\": [80, \"nm\"], \"k_falloff\": [0.0024], \"passive_mode\": [\"exponential\"], \"passive_exp_sigma\": [300], \"passive_exp_L\": [80], \"passive_l_slack\": [900, \"nm\"] }, \"membranes\": { \"kinetic_scheme\": [\"Ten_Tusscher_2004\"], \"simple_2_compartment\":{ \"Ca_content\": [1e-3], \"k_leak\": [2e-3], \"k_act\": [5e-2], \"k_serca\": [10.0] }, \"Ten_Tusscher_2004\":{ \"g_to_factor\": [1], \"g_Kr_factor\": [1], \"g_Ks_factor\": [1], \"Ca_a_rel_factor\": [1], \"Ca_V_leak_factor\": [1], \"Ca_Vmax_up_factor\": [1], \"g_CaL_factor\": [1] } } }, \"profiling\":{ \"profiling_activation\":[false] }, \"saving_to_spreadsheet\":{ \"saving_data_activation\":[false], \"output_data_format\":[\"csv\"], \"start_index\":[0], \"stop_index\":[30000] } } . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_normal.html#instruction-file",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_normal.html#instruction-file"
  },"9": {
    "doc": "Baroreceptor (normal loading)",
    "title": "Outputs",
    "content": "When the simulation is funished up, this set of output figures will be shown up in path_to_PyMyoVent_repo\\temp\\baroreceptor directory. | Simmulation summary output | . | Baroreceptor output | . | Systemic circulation output . | P_V loop output . | . | Fluxes output . | Blood flows output . | . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_normal.html#outputs",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_normal.html#outputs"
  },"10": {
    "doc": "Baroreceptor (perturbed loading)",
    "title": "Baroreceptor (perturbed loading)",
    "content": ". | Instruction | Note | Instruction file | Outputs | New User Defined Perturbation | . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_perturbed.html",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_perturbed.html"
  },"11": {
    "doc": "Baroreceptor (perturbed loading)",
    "title": "Instruction",
    "content": ". | Lunch Anaconda prompt. | Navigate to Python_code folder in PyMyoVent’s repository directory: . | $ cd path_to_PyMyoVent_repo\\Python_code | . | Use the following command to run the Baroreceptor demo under perturbed ventricular loading condition. | $ python PyMyoVent.py run_defined_model ..\\demo_files\\baro_pert\\baro_pert_model.json | After a few minutes the simulation would be finished. | . | . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_perturbed.html#instruction",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_perturbed.html#instruction"
  },"12": {
    "doc": "Baroreceptor (perturbed loading)",
    "title": "Note",
    "content": ". | The baroreceptor module starts to regulate the arterial pressure at \"start_index\":[5000], which can be modified by the user. | The baroreceptor module tries to maintain the mean arterial pressure at 87.7 mm Hg, as a normal level for healthy human, by regulating heart rate, myofilaments contractility, intracellular Ca handling, and vascular tone. | This model uses an electrophysiology model proposed by ten Tusscher. | Perturbation module is activated by adding \"perturbation\" section in the instruction file. | Perturbed loading was applied by simulating hemorrhage condition via loosing 10% of blood volume through venous compartment in the circulation module. | The perturbation starts from time-point index of 80000 to 90000. This perturbation condition is defined in the \"volume\" section in the \"perturbation\": | . \"volume\":{ \"start_index\": [80000], \"stop_index\": [90000], \"increment\": [-0.5e-4] } . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_perturbed.html#note",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_perturbed.html#note"
  },"13": {
    "doc": "Baroreceptor (perturbed loading)",
    "title": "Instruction file",
    "content": ". | The instruction file is written in JSON format and is located at path_to_PyMyoVent_repo\\demo_files\\baro_pert\\baro_pert_model.json. | . { \"output_parameters\": { \"input_file\": [\"..\\\\temp\\\\baro_pert\\\\baro_pert.json\"], \"csv_file\": [\"..\\\\temp\\\\baro_pert\\\\baro_pert.csv\"], \"summary_figure\": [\"..\\\\temp\\\\baro_pert\\\\baro_pert_summary.png\"], \"pv_figure\": [\"..\\\\temp\\\\baro_pert\\\\baro_pert_pv.png\"], \"flows_figure\": [\"..\\\\temp\\\\baro_pert\\\\baro_pert_flows.png\"], \"hs_fluxes_figure\": [\"..\\\\temp\\\\baro_pert\\\\baro_pert_hs_fluxes.png\"], \"baro_figure\": [\"..\\\\temp\\\\baro_pert\\\\baro_pert_baro.png\"], \"circulatory\": [\"..\\\\temp\\\\baro_pert\\\\baro_pert_circulation.png\"] }, \"system_control\":{ \"simulation\":{ \"no_of_time_points\": [150000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [0.857,\"s\"] }, \"baroreceptor\":{ \"start_index\":[5000], \"N_t\":[5000], \"afferent\": { \"b_max\": [2], \"b_min\": [0], \"S\": [0.067,\"mmHg\"], \"P_set\": [87.7,\"mmHg\"] }, \"efferent\":{ \"heart_period\":{ \"G_T\": [0.07] }, \"k_1\":{ \"G_k1\": [-0.1] }, \"k_on\":{ \"G_k_on\":[0.08] }, \"ca_uptake\":{ \"G_up\": [-0.05] }, \"g_cal\":{ \"G_gcal\": [-0.07] }, \"c_venous\":{ \"G_c_venous\": [0.1] }, \"r_arteriolar\":{ \"G_r_arteriolar\": [-0.1] } } } }, \"perturbations\": { \"volume\":{ \"start_index\": [80000], \"stop_index\": [90000], \"increment\": [-0.5e-4] }, \"valve\":{ \"aortic\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] }, \"mitral\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] } }, \"compliance\": { \"aorta\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"capillaries\": { \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"venous\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } }, \"resistance\": { \"aorta\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] }, \"capillaries\": { \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] }, \"venous\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] }, \"ventricle\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] } }, \"myosim\":{ \"k_1\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] }, \"k_2\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] }, \"k_4_0\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] } }, \"ca_handling\":{ \"ca_uptake\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] }, \"ca_leak\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] }, \"g_cal\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0.0] } } }, \"circulation\":{ \"no_of_compartments\": [6], \"blood\":{ \"volume\":[5,\"liters\"] }, \"aorta\":{ \"resistance\": [40,\"s\"], \"compliance\": [0.0004,\"liter_per_mmHg\"] }, \"arteries\":{ \"resistance\": [80,\"s\"], \"compliance\": [0.0009,\"liter_per_mmHg\"] }, \"arterioles\":{ \"resistance\": [400,\"s\"], \"compliance\": [0.005,\"liter_per_mmHg\"] }, \"capillaries\":{ \"resistance\": [340,\"s\"], \"compliance\": [0.03,\"liter_per_mmHg\"] }, \"veins\":{ \"resistance\": [330,\"s\"], \"compliance\": [0.5,\"liter_per_mmHg\"] }, \"ventricle\":{ \"resistance\": [10,\"s\"], \"wall_volume\": [0.1,\"liters\"], \"slack_volume\": [0.08,\"liters\"], \"wall_density\": [1055,\"g/l\"], \"body_surface_area\": [1.90,\"m^2\"] } }, \"half_sarcomere\":{ \"max_rate\": [5000,\"s^-1\"], \"temperature\": [288, \"Kelvin\"], \"cb_number_density\": [6.9e16, \"number of cb's/m^2\"], \"initial_hs_length\": [900, \"nm\"], \"ATPase_activation\":[false], \"delta_energy\":[70,\"kJ/mol\"], \"avagadro_number\":[6.02e23,\"mol^-1\"], \"reference_hs_length\":[1100,\"nm\"], \"myofilaments\":{ \"kinetic_scheme\": [\"3state_with_SRX\"], \"k_1\": [2,\"s^-1\"], \"k_force\": [0.6e-3, \"(N^-1)(m^2)\"], \"k_2\": [200, \"s^-1\"], \"k_3\": [100, \"(nm^-1)(s^-1)\"], \"k_4_0\": [200, \"s^-1\"], \"k_4_1\": [0.3, \"nm^-4\"], \"k_cb\": [0.001, \"N*m^-1\"], \"x_ps\": [5, \"nm\"], \"k_on\": [5e8, \"(M^-1)(s^-1)\"], \"k_off\": [200, \"s^-1\"], \"k_coop\": [5], \"bin_min\": [-10, \"nm\"], \"bin_max\": [10, \"nm\"], \"bin_width\": [1, \"nm\"], \"filament_compliance_factor\": [0.5], \"thick_filament_length\": [815, \"nm\"], \"thin_filament_length\": [1120, \"nm\"], \"bare_zone_length\": [80, \"nm\"], \"k_falloff\": [0.0024], \"passive_mode\": [\"exponential\"], \"passive_exp_sigma\": [300], \"passive_exp_L\": [80], \"passive_l_slack\": [900, \"nm\"] }, \"membranes\": { \"kinetic_scheme\": [\"Ten_Tusscher_2004\"], \"simple_2_compartment\":{ \"Ca_content\": [1e-3], \"k_leak\": [2e-3], \"k_act\": [5e-2], \"k_serca\": [10.0] }, \"Ten_Tusscher_2004\":{ \"g_to_factor\": [1], \"g_Kr_factor\": [1], \"g_Ks_factor\": [1], \"Ca_a_rel_factor\": [1], \"Ca_V_leak_factor\": [1], \"Ca_Vmax_up_factor\": [1], \"g_CaL_factor\": [1] } } }, \"profiling\":{ \"profiling_activation\":[false] }, \"saving_to_spreadsheet\":{ \"saving_data_activation\":[false], \"output_data_format\":[\"csv\"], \"start_index\":[0], \"stop_index\":[0] } } . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_perturbed.html#instruction-file",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_perturbed.html#instruction-file"
  },"14": {
    "doc": "Baroreceptor (perturbed loading)",
    "title": "Outputs",
    "content": "When the simulation is funished up, this set of output figures will be shown up in path_to_PyMyoVent_repo\\temp\\baro_pert directory. | Simmulation summary output . | Baroreceptor output . | Systemic circulation output . | P_V loop output . | Fluxes output . | Blood flows output . | . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_perturbed.html#outputs",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_perturbed.html#outputs"
  },"15": {
    "doc": "Baroreceptor (perturbed loading)",
    "title": "New User Defined Perturbation",
    "content": ". | The user can apply any sort of possible perturbation to the simulation by defining the \"start_index\", \"stop_index\", and \"increment\" for the parameter you want to perturb in the instruction file. | For example, if you want to increase the Aortic resistance by 200% to simulate the aortic stenosis you should do: . | Determine the starting and ending time-points for the perturbation in seconds. | Then convert them into the time index by: . | \"start_index\" = starting time in seconds/\"time_step\" | \"stop_index\" = ending time in seconds/\"time_step\" | . | Assign the \"start_index\" and \"stop_index\" in the instruction file. | Calculate the perturbation \"increment\" for each given time step as follows: . | Calculate the amount of change you need tp apply: | . Total_change = Final_value - Initial_value . | Calculate the amount of incremental change by: | . \"increment\" = Total_change/(\"stop_index\" - \"start_index\") . | . | . | . ",
    "url": "http://localhost:4000/pages/demos/baroreceptor/baroreceptor_perturbed.html#new-user-defined-perturbation",
    "relUrl": "/pages/demos/baroreceptor/baroreceptor_perturbed.html#new-user-defined-perturbation"
  },"16": {
    "doc": "Circulatory",
    "title": "Circulatory",
    "content": ". | Overview | Theory | Parameters | . ",
    "url": "http://localhost:4000/pages/modules/circulatory/circulatory.html",
    "relUrl": "/pages/modules/circulatory/circulatory.html"
  },"17": {
    "doc": "Circulatory",
    "title": "Overview",
    "content": "A zero dimensional (lumped parameters) circulatory model including six compartments (aorta, arteries, arterioles, capillaries, veins, ventricle) is employed in the PyMyoVent framework. ",
    "url": "http://localhost:4000/pages/modules/circulatory/circulatory.html#overview",
    "relUrl": "/pages/modules/circulatory/circulatory.html#overview"
  },"18": {
    "doc": "Circulatory",
    "title": "Theory",
    "content": ". | The blood volume in each compartment depends on the blood flow gradient across the compartment. | . | Where Q(i to j) represents the blood flow between compartment i and j. | The blood flow between compartments is governed by Ohm’s law. | . | The blood pressure in each compartment, except the ventricle, is related to the corresponding blood volume with a compliance factor. | . ",
    "url": "http://localhost:4000/pages/modules/circulatory/circulatory.html#theory",
    "relUrl": "/pages/modules/circulatory/circulatory.html#theory"
  },"19": {
    "doc": "Circulatory",
    "title": "Parameters",
    "content": "The parameters for the circulatory module are tuned in a way to mimic the phisology of a healthy adult. Their values are located at the circulation section of the instruction file. \"circulation\":{ \"no_of_compartments\": [6], \"blood\":{ \"volume\":[5,\"liters\"] }, \"aorta\":{ \"resistance\": [40,\"s\"], \"compliance\": [0.0005,\"liter_per_mmHg\"] }, \"arteries\":{ \"resistance\": [20,\"s\"], \"compliance\": [0.0011,\"liter_per_mmHg\"] }, \"arterioles\":{ \"resistance\": [520,\"s\"], \"compliance\": [0.005,\"liter_per_mmHg\"] }, \"capillaries\":{ \"resistance\": [310,\"s\"], \"compliance\": [0.03,\"liter_per_mmHg\"] }, \"veins\":{ \"resistance\": [300,\"s\"], \"compliance\": [0.5,\"liter_per_mmHg\"] }, \"ventricle\":{ \"resistance\": [10,\"s\"], \"wall_volume\": [0.1,\"liters\"], \"slack_volume\": [0.08,\"liters\"], \"wall_density\": [1055,\"g/l\"], \"body_surface_area\": [1.90,\"m^2\"] } }, . ",
    "url": "http://localhost:4000/pages/modules/circulatory/circulatory.html#parameters",
    "relUrl": "/pages/modules/circulatory/circulatory.html#parameters"
  },"20": {
    "doc": "Demos",
    "title": "Demos",
    "content": ". | This tab helps you to run various simulations using PyMyoVent to get more familiar with the software. | Before start running demos, make sure you have set up the required environment beforehand. | In general, for running a user-defined simulation, the user needs to define the proper input files and then feed them into the software code. | However, for running demos, the main three input files are already created and just need to be called by the new user. | . ",
    "url": "http://localhost:4000/pages/demos/demos.html",
    "relUrl": "/pages/demos/demos.html"
  },"21": {
    "doc": "Electrophysiology",
    "title": "Electrophysiology",
    "content": ". | Overview | Note | . ",
    "url": "http://localhost:4000/pages/modules/electrophysiology/electrophysiology.html",
    "relUrl": "/pages/modules/electrophysiology/electrophysiology.html"
  },"22": {
    "doc": "Electrophysiology",
    "title": "Overview",
    "content": "The PyMyoVent framework can be implemented using several different electrophysiology modules. As of now, the ten Tusscher model of human ventricular cells was used in the model. The ten Tusscher model uses 17 differential equations for different variable states and has 46 free parameters representing different constant factors. The intracellular Ca2+ concentration calculated by this module drives the MyoSim model of contractile system. ",
    "url": "http://localhost:4000/pages/modules/electrophysiology/electrophysiology.html#overview",
    "relUrl": "/pages/modules/electrophysiology/electrophysiology.html#overview"
  },"23": {
    "doc": "Electrophysiology",
    "title": "Note",
    "content": ". | The ten Tusscher source code can be downloaded from CellML website. | The ten Tusscher model’s parmeters were not chnaged in the original PyMyoVent simulation while running under fixed heart rate condition. | Only when the simple baroreceptor model is activated, the baroreceptor module regulates the Vmax,up (i.e. maximal SERCA uptake current) and GCaL (i.e. maximal L-type calcium current). | Normally, The ten Tusscher source code takes several hundreds heart beats to reach to the steady state. Therefore, the steady state solution is used in PyMyoVent framework as the initial condition for the electrophysiology model. | . ",
    "url": "http://localhost:4000/pages/modules/electrophysiology/electrophysiology.html#note",
    "relUrl": "/pages/modules/electrophysiology/electrophysiology.html#note"
  },"24": {
    "doc": "Electrophysiology model",
    "title": "Electrophysiology model",
    "content": ". | Instruction | Note | Instruction file | Outputs | . ",
    "url": "http://localhost:4000/pages/demos/electrophyisology_model/electrophysiology_model.html",
    "relUrl": "/pages/demos/electrophyisology_model/electrophysiology_model.html"
  },"25": {
    "doc": "Electrophysiology model",
    "title": "Instruction",
    "content": ". | Lunch Anaconda prompt. | Navigate to Python_code folder in PyMyoVent’s repository directory: . | $ cd path_to_PyMyoVent_repo\\Python_code | . | Use the following command to run the simulation using ten Tusscher mid-myocardial electrophysiology model instead of simple two compartment model. | $ python PyMyoVent.py run_defined_model ..\\demo_files\\electrophysiology\\electrophysiology_model.json | After a few minutes the simulation would be finished. | . | . ",
    "url": "http://localhost:4000/pages/demos/electrophyisology_model/electrophysiology_model.html#instruction",
    "relUrl": "/pages/demos/electrophyisology_model/electrophysiology_model.html#instruction"
  },"26": {
    "doc": "Electrophysiology model",
    "title": "Note",
    "content": ". | This demo runs a simple single ventricle simulation with a fixed heart rate of 70 BPM and no baroreceptor reflex control. | To swithc the electrophysiology model you only need to change the \"kinetic_scheme\" from \"simple_2_compartment\" to \"Ten_Tusscher_2004\" in the membranes section. | . ",
    "url": "http://localhost:4000/pages/demos/electrophyisology_model/electrophysiology_model.html#note",
    "relUrl": "/pages/demos/electrophyisology_model/electrophysiology_model.html#note"
  },"27": {
    "doc": "Electrophysiology model",
    "title": "Instruction file",
    "content": ". | The instruction file is written in JSON format and is located at path_to_PyMyoVent_repo\\demo_files\\electrophysiology\\electrophysiology_model.json. | . { \"output_parameters\": { \"input_file\": [\"..\\\\temp\\\\electrophysiology\\\\electrophysiology.json\"], \"csv_file\": [\"..\\\\temp\\\\electrophysiology\\\\electrophysiology.csv\"], \"summary_figure\": [\"..\\\\temp\\\\electrophysiology\\\\electrophysiology_summary.png\"], \"pv_figure\": [\"..\\\\temp\\\\electrophysiology\\\\electrophysiology_pv.png\"], \"flows_figure\": [\"..\\\\temp\\\\electrophysiology\\\\electrophysiology_flows.png\"], \"hs_fluxes_figure\": [\"..\\\\temp\\\\electrophysiology\\\\electrophysiology_hs_fluxes.png\"] }, \"system_control\":{ \"simulation\":{ \"no_of_time_points\": [30000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [0.857,\"s\"] } }, \"circulation\":{ \"no_of_compartments\": [6], \"blood\":{ \"volume\":[5,\"liters\"] }, \"aorta\":{ \"resistance\": [40,\"s\"], \"compliance\": [0.0004,\"liter_per_mmHg\"] }, \"arteries\":{ \"resistance\": [80,\"s\"], \"compliance\": [0.0009,\"liter_per_mmHg\"] }, \"arterioles\":{ \"resistance\": [400,\"s\"], \"compliance\": [0.005,\"liter_per_mmHg\"] }, \"capillaries\":{ \"resistance\": [340,\"s\"], \"compliance\": [0.03,\"liter_per_mmHg\"] }, \"veins\":{ \"resistance\": [330,\"s\"], \"compliance\": [0.5,\"liter_per_mmHg\"] }, \"ventricle\":{ \"resistance\": [10,\"s\"], \"wall_volume\": [0.1,\"liters\"], \"slack_volume\": [0.08,\"liters\"], \"wall_density\": [1055,\"g/l\"], \"body_surface_area\": [1.90,\"m^2\"] } }, \"half_sarcomere\":{ \"max_rate\": [5000,\"s^-1\"], \"temperature\": [288, \"Kelvin\"], \"cb_number_density\": [6.9e16, \"number of cb's/m^2\"], \"initial_hs_length\": [900, \"nm\"], \"ATPase_activation\":[false], \"delta_energy\":[70,\"kJ/mol\"], \"avagadro_number\":[6.02e23,\"mol^-1\"], \"reference_hs_length\":[1100,\"nm\"], \"myofilaments\":{ \"kinetic_scheme\": [\"3state_with_SRX\"], \"k_1\": [2,\"s^-1\"], \"k_force\": [0.6e-3, \"(N^-1)(m^2)\"], \"k_2\": [200, \"s^-1\"], \"k_3\": [100, \"(nm^-1)(s^-1)\"], \"k_4_0\": [200, \"s^-1\"], \"k_4_1\": [0.3, \"nm^-4\"], \"k_cb\": [0.001, \"N*m^-1\"], \"x_ps\": [5, \"nm\"], \"k_on\": [5e8, \"(M^-1)(s^-1)\"], \"k_off\": [200, \"s^-1\"], \"k_coop\": [5], \"bin_min\": [-10, \"nm\"], \"bin_max\": [10, \"nm\"], \"bin_width\": [1, \"nm\"], \"filament_compliance_factor\": [0.5], \"thick_filament_length\": [815, \"nm\"], \"thin_filament_length\": [1120, \"nm\"], \"bare_zone_length\": [80, \"nm\"], \"k_falloff\": [0.0024], \"passive_mode\": [\"exponential\"], \"passive_exp_sigma\": [300], \"passive_exp_L\": [80], \"passive_l_slack\": [900, \"nm\"] }, \"membranes\": { \"kinetic_scheme\": [\"Ten_Tusscher_2004\"], \"simple_2_compartment\":{ \"Ca_content\": [1e-3], \"k_leak\": [2e-3], \"k_act\": [5e-2], \"k_serca\": [10.0] }, \"Ten_Tusscher_2004\":{ \"g_to_factor\": [1], \"g_Kr_factor\": [1], \"g_Ks_factor\": [1], \"Ca_a_rel_factor\": [1], \"Ca_V_leak_factor\": [1], \"Ca_Vmax_up_factor\": [1], \"g_CaL_factor\": [1] } } }, \"profiling\":{ \"profiling_activation\":[false] }, \"saving_to_spreadsheet\":{ \"saving_data_activation\":[false], \"output_data_format\":[\"csv\"], \"start_index\":[0], \"stop_index\":[30000] } } . ",
    "url": "http://localhost:4000/pages/demos/electrophyisology_model/electrophysiology_model.html#instruction-file",
    "relUrl": "/pages/demos/electrophyisology_model/electrophysiology_model.html#instruction-file"
  },"28": {
    "doc": "Electrophysiology model",
    "title": "Outputs",
    "content": ". | Simmulation summary output | . | PV loop output | . | Fluxes output . | Blood flows output . | . ",
    "url": "http://localhost:4000/pages/demos/electrophyisology_model/electrophysiology_model.html#outputs",
    "relUrl": "/pages/demos/electrophyisology_model/electrophysiology_model.html#outputs"
  },"29": {
    "doc": "Installation",
    "title": "Installation",
    "content": ". | Overview | Setting up Python environement | Using an Existing Environment | Cloning PyMyoVent Repository | . ",
    "url": "http://localhost:4000/pages/environment/environment.html",
    "relUrl": "/pages/environment/environment.html"
  },"30": {
    "doc": "Installation",
    "title": "Overview",
    "content": ". | PyMyoVent is written in Python version 3 and uses a number of packages and libraries. We at the Campbell-Muscell-Lab, highly recommend every users to use Anaconda as the Python environment management. | . ",
    "url": "http://localhost:4000/pages/environment/environment.html#overview",
    "relUrl": "/pages/environment/environment.html#overview"
  },"31": {
    "doc": "Installation",
    "title": "Setting up Python environement",
    "content": ". | Python How Tos helps you to setup the required python environment and management usefule for running a simulation with PyMyoVent. | . ",
    "url": "http://localhost:4000/pages/environment/environment.html#setting-up-python-environement",
    "relUrl": "/pages/environment/environment.html#setting-up-python-environement"
  },"32": {
    "doc": "Installation",
    "title": "Using an Existing Environment",
    "content": ". | You can also use an existing environment for running PyMyoVent framework. Similar to the other software repositories developed by Campbell-Muscell-Lab, there is an environment.yml file located at path_to_PyMyoVent_repo/environment directory that includes all the required packages for running PyMyoVent project. An individual user can create a local environment using the existing file and activate it prior to running PyMyoVent framework. | If this is your first time dealing with creating local environments for a project, you might need to check this link first. | . ",
    "url": "http://localhost:4000/pages/environment/environment.html#using-an-existing-environment",
    "relUrl": "/pages/environment/environment.html#using-an-existing-environment"
  },"33": {
    "doc": "Installation",
    "title": "Cloning PyMyoVent Repository",
    "content": ". | PyMyoVent repository](http://github.com/Campbell-Muscle-Lab/PyMyoVent) is hosted on Github website. The best way for cloning the repository and have the version control over the source code is using GitHub Desktop software. | Please check Github Repos to get more familiar with how to clone a repository from GitHub. | . ",
    "url": "http://localhost:4000/pages/environment/environment.html#cloning-pymyovent-repository",
    "relUrl": "/pages/environment/environment.html#cloning-pymyovent-repository"
  },"34": {
    "doc": "Figure 2",
    "title": "Figure 2",
    "content": ". | Demos | Python Script | Output Figure | . ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/figures_2/fig_2.html",
    "relUrl": "/pages/publications/July_2020_frontiers/figures_2/fig_2.html"
  },"35": {
    "doc": "Figure 2",
    "title": "Demos",
    "content": "{ \"output_parameters\": { \"excel_file\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation.xlsx\"], \"csv_file\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation.csv\"], \"input_file\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation.json\"], \"summary_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_summary.png\"], \"pv_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_pv.png\"], \"baro_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_baro.png\"], \"flows_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_flows.png\"], \"hs_fluxes_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_hs_fluxes.png\"] }, \"baroreflex\": { \"baro_scheme\": [\"fixed_heart_rate\"], \"fixed_heart_rate\":{ \"simulation\":{ \"no_of_time_points\": [17000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [1,\"s\"] } }, \"simple_baroreceptor\":{ \"simulation\":{ \"start_index\":[2000], \"memory\":[2,\"s\"], \"no_of_time_points\": [150000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [1,\"s\"] }, \"afferent\": { \"b_max\": [2], \"b_min\": [0], \"S\": [0.067,\"mmHg\"], \"P_n\": [90,\"mmHg\"] }, \"regulation\":{ \"heart_period\":{ \"G_T\": [0.03] }, \"k_1\":{ \"G_k1\": [-0.05] }, \"k_on\":{ \"G_k_on\":[0.02] }, \"ca_uptake\":{ \"G_up\": [-0.02] }, \"g_cal\":{ \"G_gcal\": [-0.03] } } } }, \"perturbations\": { \"perturbation_activation\":[true], \"volume\":{ \"start_index\": [10000], \"stop_index\": [15000], \"increment\": [-6e-4] }, \"valve\":{ \"aortic\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"mitral\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } }, \"compliance\": { \"aorta\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"capillaries\": { \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"venous\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } }, \"resistance\": { \"aorta\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"capillaries\": { \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"venous\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"ventricle\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } }, \"myosim\":{ \"k_1\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"k_2\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"k_4_0\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } }, \"ca_handling\":{ \"ca_uptake\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"ca_leak\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"g_cal\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } } }, \"circulation\":{ \"no_of_compartments\": [6], \"blood\":{ \"volume\":[5,\"liters\"] }, \"aorta\":{ \"resistance\": [40,\"s\"], \"compliance\": [0.002,\"liter_per_mmHg\"] }, \"arteries\":{ \"resistance\": [200,\"s\"], \"compliance\": [0.0005,\"liter_per_mmHg\"] }, \"arterioles\":{ \"resistance\": [500,\"s\"], \"compliance\": [0.0005,\"liter_per_mmHg\"] }, \"capillaries\":{ \"resistance\": [300,\"s\"], \"compliance\": [0.0025,\"liter_per_mmHg\"] }, \"veins\":{ \"resistance\": [100,\"s\"], \"compliance\": [0.35,\"liter_per_mmHg\"] }, \"ventricle\":{ \"resistance\": [20,\"s\"], \"wall_volume\": [0.1,\"liters\"], \"slack_volume\": [0.08,\"liters\"], \"wall_density\": [1055,\"g/l\"], \"body_surface_area\": [1.90,\"m^2\"] } }, \"half_sarcomere\":{ \"max_rate\": [5000,\"s^-1\"], \"temperature\": [288, \"Kelvin\"], \"cb_number_density\": [6.9e16, \"number of cb's/m^2\"], \"initial_hs_length\": [900, \"nm\"], \"ATPase_activation\":[false], \"delta_energy\":[70,\"kJ/mol\"], \"avagadro_number\":[6.02e23,\"mol^-1\"], \"reference_hs_length\":[1100,\"nm\"], \"myofilaments\":{ \"kinetic_scheme\": [\"3state_with_SRX\"], \"k_1\": [2,\"s^-1\"], \"k_force\": [1e-3, \"(N^-1)(m^2)\"], \"k_2\": [200, \"s^-1\"], \"k_3\": [100, \"(nm^-1)(s^-1)\"], \"k_4_0\": [200, \"s^-1\"], \"k_4_1\": [0.1, \"nm^-4\"], \"k_cb\": [0.001, \"N*m^-1\"], \"x_ps\": [5, \"nm\"], \"k_on\": [5e8, \"(M^-1)(s^-1)\"], \"k_off\": [200, \"s^-1\"], \"k_coop\": [5], \"bin_min\": [-10, \"nm\"], \"bin_max\": [10, \"nm\"], \"bin_width\": [1, \"nm\"], \"filament_compliance_factor\": [0.5], \"thick_filament_length\": [815, \"nm\"], \"thin_filament_length\": [1120, \"nm\"], \"bare_zone_length\": [80, \"nm\"], \"k_falloff\": [0.0024], \"passive_mode\": [\"exponential\"], \"passive_exp_sigma\": [500], \"passive_exp_L\": [80], \"passive_l_slack\": [900, \"nm\"] }, \"membranes\": { \"kinetic_scheme\": [\"Ten_Tusscher_2004\"], \"simple_2_compartment\":{ \"Ca_content\": [1e-3], \"k_leak\": [2e-3], \"k_act\": [5e-2], \"k_serca\": [10.0] }, \"Ten_Tusscher_2004\":{ \"g_to_factor\": [1], \"g_Kr_factor\": [1], \"g_Ks_factor\": [1], \"Ca_a_rel_factor\": [1], \"Ca_V_leak_factor\": [1], \"Ca_Vmax_up_factor\": [1], \"g_CaL_factor\": [1] } } }, \"growth\": { \"growth_activation\": [false], \"start_index\": [200000], \"moving_average_window\": [5000], \"driven_signal\": [\"stress\"], \"concenrtric\":{ \"G_stress_driven\":[1e-6], \"G_ATPase_driven\":[-2] }, \"eccentric\":{ \"G_number_of_hs\":[-3e-6], \"G_ATPase_driven\":[0] } }, \"profiling\":{ \"profiling_activation\":[false] }, \"saving_to_spreadsheet\":{ \"saving_data_activation\":[true], \"output_data_format\":[\"csv\"], \"start_index\":[0], \"stop_index\":[17000] }, \"multi_threads\" :{ \"multithreading_activation\":[false], \"parameters_in\":{ \"G_wall_thickness\": { \"values\":[25,50,100,200,300], \"param_out\":[\"ventricle_wall_thickness\"], \"section\": [\"growth\"] }, \"G_number_of_hs\": { \"values\":[25,50,100,200,300], \"param_out\":[\"number_of_hs\"], \"section\": [\"growth\"] } }, \"output_main_folder\": [\"..\\\\temp\\\\frontier_base_simulation\\\\demo_i_j\\\\demo_i_j.json\"] } } . ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/figures_2/fig_2.html#demos",
    "relUrl": "/pages/publications/July_2020_frontiers/figures_2/fig_2.html#demos"
  },"36": {
    "doc": "Figure 2",
    "title": "Python Script",
    "content": "def range(x, axis=0): return np.max(x, axis=axis) - np.min(x, axis=axis) def display_Fig2 (data_structure, output_file_string=\"\", t_limits=[],dpi=300): # unit multipliers membrane_voltage_factor = 1000 # Convert Voltage to mili-Voltage myo_ca_transient_factor = 1e6 # Convert Mol to micro-Mol sarcomeric_force_factor = 1e-3 # Convert N to KN # y-lim thresholds pressure_lim = [0,140] # in mm Hg vol_lim = [0.005,5] # in liters vent_vol_lim = [0.05,0.20] # in liters act_lim = [0,1] # unitless mem_volt_lim = [-100,100] # in mili-Voltage myof_ca_lim = [0,1] # in micro-Mol sarc_length_lim = [820,1060] # in nano-meter sarc_force_lim = [0,40] # in kilo-pascal thin_fila_lim = [0,1] # unitless thick_fila_lim = [0,1] # unitless # Arrow details x_start_arrow = 10 dxa = 5 y_start_arrow = 150 dya= 0 # Notation details x_start = 8 dx = 0 y_start = 170 dy= 0 # Developing plots no_of_rows = 10 no_of_cols = 1 f = plt.figure(constrained_layout=True) f.set_size_inches([8, 10]) #f.subplots_adjust(left=0.2, bottom=0.2, right=0.6, top=0.9) spec2 = gridspec.GridSpec(nrows=no_of_rows, ncols=no_of_cols, figure=f,width_ratios=[1]) # ***Plot pressure data*** ax1 = f.add_subplot(spec2[0, 0]) ax1.plot('time', 'pressure_ventricle', data=data_structure, label='Ventricle',color='#0470BE') ax1.plot('time', 'pressure_aorta', data=data_structure, label='Aorta',color='#D8501A') ax1.plot('time', 'pressure_arteries', data=data_structure, label='Arteries',color='#EEAF1F') ax1.plot('time', 'pressure_arterioles', data=data_structure, label='Arterioles',color='#802D90') ax1.plot('time', 'pressure_capillaries', data=data_structure, label='Capillaries',color='#75AC2F') ax1.plot('time', 'pressure_veins', data=data_structure, label='Veins',color='#4DBEEF') # remove the unnecessary ax frames ax1.spines['top'].set_visible(False) ax1.spines['right'].set_visible(False) ax1.spines['bottom'].set_visible(False) # X_axis if t_limits: ax1.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax1.set_xticks([]) # Y axis ax1.set_ylim(pressure_lim) ax1.set_yticks(pressure_lim) ax1.set_ylabel('Pressure\\n(mm Hg)', fontsize = 11,rotation=0,labelpad=20,y=0.2) # add notation and arrow ax1.annotate(s='',xy=(x_start_arrow,y_start_arrow), xytext=(x_start_arrow+dxa,y_start_arrow+dya), arrowprops=dict(arrowstyle='&lt;-&gt;'), annotation_clip=False,fontsize=15,fontweight='bold') ax1.annotate('Volume perturbation',xy=(x_start,y_start), xytext=(x_start+dx,y_start+dy),annotation_clip=False,fontsize=12) # other adjustments ax1.tick_params(labelsize = 12) ax1.legend(loc=(1.02, 0.0),ncol=2,fontsize = 11,columnspacing=0.6) # ***Plot Volume data*** ax2 = f.add_subplot(spec2[1, 0]) ax2.semilogy('time', 'volume_aorta', data=data_structure, label='Aorta',color='#D8501A') ax2.semilogy('time', 'volume_arteries', data=data_structure, label='Arteries',color='#EEAF1F') ax2.semilogy('time', 'volume_arterioles', data=data_structure, label='Arterioles',color='#802D90') ax2.semilogy('time', 'volume_capillaries', data=data_structure, label='Capillaries',color='#75AC2F') ax2.semilogy('time', 'volume_veins', data=data_structure, label='Veins',color='#4DBEEF') # remove the unnecessary ax frames ax2.spines['top'].set_visible(False) ax2.spines['right'].set_visible(False) ax2.spines['bottom'].set_visible(False) # X_axis if t_limits: ax2.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax2.set_xticks([]) # Y_axis ax2.set_ylim(vol_lim) ax2.minorticks_off() y_ticks = [0.005,0.05,0.5, 5] ax2.set_yticks(y_ticks) ax2.get_yaxis().set_major_formatter(tk.FixedFormatter(seq =y_ticks)) ax2.set_ylabel('Volume\\n(liters)', fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax2.tick_params(labelsize = 12) ax2.legend(loc=(1.02, 0.0),fontsize = 11, ncol=2,columnspacing=0.6) # ***Plot vetricular volume data*** ax3 = f.add_subplot(spec2[2, 0]) ax3.plot('time', 'volume_ventricle', data=data_structure, label='Ventricle',color='#0470BE') # remove the unnecessary ax frames ax3.spines['top'].set_visible(False) ax3.spines['right'].set_visible(False) ax3.spines['bottom'].set_visible(False) # X_axis if t_limits: ax3.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax3.set_xticks([]) # Y_axis ax3.set_ylim(vent_vol_lim) ax3.set_yticks(vent_vol_lim) ax3.set_ylabel('Ventricular\\nVolume\\n(liters)', fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax3.tick_params(labelsize = 12) # ***Plot activation data*** ax4 = f.add_subplot(spec2[3, 0]) ax4.plot('time', 'activation', data=data_structure, label='Activation',color='#0470BE') # remove the unnecessary ax frames ax4.spines['top'].set_visible(False) ax4.spines['right'].set_visible(False) ax4.spines['bottom'].set_visible(False) # X_axis if t_limits: ax4.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax4.set_xticks([]) #Y_axis ax4.set_ylim(act_lim) ax4.set_yticks(act_lim) ax4.set_ylabel('Activation', fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax4.tick_params(labelsize = 12) # ***Plot membrane coltage data*** ax5 = f.add_subplot(spec2[4, 0]) # convert the y_axis from voltage to mili_voltage y_axis = data_structure['membrane_voltage']*membrane_voltage_factor x_axis = data_structure['time'] ax5.plot(x_axis, y_axis, label='Voltage',color='#0470BE') # remove the unnecessary ax frames ax5.spines['top'].set_visible(False) ax5.spines['right'].set_visible(False) ax5.spines['bottom'].set_visible(False) # X_axis if t_limits: ax5.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax5.set_xticks([]) # Y_axis ax5.set_ylim(mem_volt_lim) ax5.set_yticks([mem_volt_lim[0],0,mem_volt_lim[1]]) ax5.set_ylabel('Membrane\\nvoltage\\n(mV)', fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax5.tick_params(labelsize = 12) # ***Plot myofilament Ca transient data*** ax6 = f.add_subplot(spec2[5, 0]) # convert the y_axis from Mol to micro-Mol y_axis = data_structure['Ca_conc']*myo_ca_transient_factor x_axis = data_structure['time'] ax6.plot(x_axis, y_axis, label='Ca concentration',color='#0470BE') # remove the unnecessary ax frames ax6.spines['top'].set_visible(False) ax6.spines['right'].set_visible(False) ax6.spines['bottom'].set_visible(False) # X_axis if t_limits: ax6.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax6.set_xticks([]) # Y_axis ax6.set_ylim(myof_ca_lim) ax6.set_yticks(myof_ca_lim) ax6.set_ylabel('Myofilament\\n$[Ca^{2+}]$\\n(\\u03BCM)' , fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax6.tick_params(labelsize = 12) # ***Plot half-sarcomere length data*** ax7 = f.add_subplot(spec2[6, 0]) ax7.plot('time', 'hs_length', data=data_structure, label='hs_length',color='#0470BE') # remove the unnecessary ax frames ax7.spines['top'].set_visible(False) ax7.spines['right'].set_visible(False) ax7.spines['bottom'].set_visible(False) # X_axis if t_limits: ax7.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax7.set_xticks([]) # Y_axis ax7.set_ylim(sarc_length_lim) ax7.set_yticks(sarc_length_lim) ax7.set_ylabel('Half-sarcomere\\nlength\\n(nm)', fontsize = 11,rotation=0,labelpad=35,y=0.2) # other adjustments ax7.tick_params(labelsize = 12) # ***Plot half-sarcomere force data*** ax8 = f.add_subplot(spec2[7, 0]) # convert the y_axis from pascal to kilo-pascal y1_axis = data_structure['hs_force']*sarcomeric_force_factor y2_axis = data_structure['cb_force']*sarcomeric_force_factor y3_axis = data_structure['pas_force']*sarcomeric_force_factor x_axis = data_structure['time'] ax8.plot(x_axis, y1_axis,label='Total',color='#0470BE') ax8.plot(x_axis, y2_axis,label='Cross-bridge',color='#D8501A') ax8.plot(x_axis, y3_axis,label='Passive',color='#EEAF1F') # remove the unnecessary ax frames ax8.spines['top'].set_visible(False) ax8.spines['right'].set_visible(False) ax8.spines['bottom'].set_visible(False) # X_axis if t_limits: ax8.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax8.set_xticks([]) # Y_axis ax8.set_ylim(sarc_force_lim) ax8.set_yticks(sarc_force_lim) ax8.set_ylabel('Half-sarcomere\\nforce\\n(KN $m^{-2}$)', fontsize = 11,rotation=0,labelpad=40,y=0.2) # other adjustments ax8.tick_params(labelsize = 12) ax8.legend(loc=(1.02, 0.0),fontsize = 11,ncol=2,columnspacing=0.6) # ***Plot thin-filament data*** ax9 = f.add_subplot(spec2[8, 0]) ax9.plot('time', 'n_off', data=data_structure, label='$N_{off}$',color='#0470BE') ax9.plot('time', 'n_on', data=data_structure, label='$N_{on}$',color='#D8501A') # remove the unnecessary ax frames ax9.spines['top'].set_visible(False) ax9.spines['right'].set_visible(False) ax9.spines['bottom'].set_visible(False) # X_axis if t_limits: ax9.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax9.set_xticks([]) # Y_axis ax9.set_ylim(thin_fila_lim) ax9.set_yticks(thin_fila_lim) ax9.set_ylabel('Thin\\nfilament', fontsize = 11,rotation=0,labelpad=45,y=0.2) # other adjustments ax9.tick_params(labelsize = 12) ax9.legend(loc=(1.02, 0.0),fontsize = 11,ncol=2,columnspacing=0.6) # ***Plot thick-filament data*** ax10 = f.add_subplot(spec2[9, 0]) ax10.plot('time', 'M_OFF', data=data_structure, label='$M_{off}$',color='#0470BE') ax10.plot('time', 'M_ON', data=data_structure, label='$M_{on}$',color='#D8501A') ax10.plot('time', 'M_bound', data=data_structure, label='$M_{FG}$',color='#EEAF1F') # remove the unnecessary ax frames ax10.spines['top'].set_visible(False) ax10.spines['right'].set_visible(False) # X_axis if t_limits: ax10.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax10.set_xticks(t_limits) ax10.set_xlabel('Time (s)',fontsize=12) # Y_axis ax10.set_ylim(thick_fila_lim) ax10.set_yticks(thick_fila_lim) ax10.set_ylabel('Thick\\nfilament', fontsize = 11,rotation=0,labelpad=45,y=0.2) # other adjustments ax10.tick_params(labelsize = 12) ax10.legend(loc=(1.02, 0.0),fontsize = 11,ncol=2,columnspacing=0.6) # change the mathematical notatio format rcParams['mathtext.default'] = 'regular' f.align_ylabels() # save the figure if (output_file_string): save_figure_to_file(f, output_file_string, dpi) def save_figure_to_file(f, im_file_string, dpi=None, verbose=0): # Writes an image to file import os from skimage.io import imsave # Check directory exists and save image file dir_path = os.path.dirname(im_file_string) if not os.path.isdir(dir_path): os.makedirs(dir_path) if (verbose): print('Saving figure to to %s' % im_file_string) f.savefig(im_file_string, dpi=dpi) if __name__ == \"__main__\": # import required libraries import os import sys import json import pandas as pd import numpy as np import matplotlib.pyplot as plt import matplotlib.gridspec as gridspec import matplotlib.ticker as tk from matplotlib import rcParams no_of_arguments = len(sys.argv) if (no_of_arguments == 1): print('Analysis called with no inputs') elif (no_of_arguments == 2): print('Running model %s' % sys.argv[1]) data_path = sys.argv[1] data = pd.read_csv(data_path) current_directory = os.getcwd() display_Fig2(data,current_directory+'/'+'Fig_2.png',[0,17]) . ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/figures_2/fig_2.html#python-script",
    "relUrl": "/pages/publications/July_2020_frontiers/figures_2/fig_2.html#python-script"
  },"37": {
    "doc": "Figure 2",
    "title": "Output Figure",
    "content": ". ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/figures_2/fig_2.html#output-figure",
    "relUrl": "/pages/publications/July_2020_frontiers/figures_2/fig_2.html#output-figure"
  },"38": {
    "doc": "Figure 3",
    "title": "Figure 3",
    "content": ". | Demos | Python Script | Output Figure | . ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/figures_3/fig_3.html",
    "relUrl": "/pages/publications/July_2020_frontiers/figures_3/fig_3.html"
  },"39": {
    "doc": "Figure 3",
    "title": "Demos",
    "content": "{ \"output_parameters\": { \"excel_file\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation.xlsx\"], \"csv_file\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation.csv\"], \"input_file\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation.json\"], \"summary_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_summary.png\"], \"pv_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_pv.png\"], \"baro_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_baro.png\"], \"flows_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_flows.png\"], \"hs_fluxes_figure\": [\"..\\\\temp\\\\frontier_base_simulation\\\\frontier_base_simulation_hs_fluxes.png\"] }, \"baroreflex\": { \"baro_scheme\": [\"fixed_heart_rate\"], \"fixed_heart_rate\":{ \"simulation\":{ \"no_of_time_points\": [17000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [1,\"s\"] } }, \"simple_baroreceptor\":{ \"simulation\":{ \"start_index\":[2000], \"memory\":[2,\"s\"], \"no_of_time_points\": [150000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [1,\"s\"] }, \"afferent\": { \"b_max\": [2], \"b_min\": [0], \"S\": [0.067,\"mmHg\"], \"P_n\": [90,\"mmHg\"] }, \"regulation\":{ \"heart_period\":{ \"G_T\": [0.03] }, \"k_1\":{ \"G_k1\": [-0.05] }, \"k_on\":{ \"G_k_on\":[0.02] }, \"ca_uptake\":{ \"G_up\": [-0.02] }, \"g_cal\":{ \"G_gcal\": [-0.03] } } } }, \"perturbations\": { \"perturbation_activation\":[true], \"volume\":{ \"start_index\": [10000], \"stop_index\": [15000], \"increment\": [-6e-4] }, \"valve\":{ \"aortic\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"mitral\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } }, \"compliance\": { \"aorta\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"capillaries\": { \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"venous\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } }, \"resistance\": { \"aorta\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"capillaries\": { \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"venous\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"ventricle\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } }, \"myosim\":{ \"k_1\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"k_2\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"k_4_0\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } }, \"ca_handling\":{ \"ca_uptake\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"ca_leak\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] }, \"g_cal\":{ \"start_index\": [0], \"stop_index\": [0], \"increment\": [0] } } }, \"circulation\":{ \"no_of_compartments\": [6], \"blood\":{ \"volume\":[5,\"liters\"] }, \"aorta\":{ \"resistance\": [40,\"s\"], \"compliance\": [0.002,\"liter_per_mmHg\"] }, \"arteries\":{ \"resistance\": [200,\"s\"], \"compliance\": [0.0005,\"liter_per_mmHg\"] }, \"arterioles\":{ \"resistance\": [500,\"s\"], \"compliance\": [0.0005,\"liter_per_mmHg\"] }, \"capillaries\":{ \"resistance\": [300,\"s\"], \"compliance\": [0.0025,\"liter_per_mmHg\"] }, \"veins\":{ \"resistance\": [100,\"s\"], \"compliance\": [0.35,\"liter_per_mmHg\"] }, \"ventricle\":{ \"resistance\": [20,\"s\"], \"wall_volume\": [0.1,\"liters\"], \"slack_volume\": [0.08,\"liters\"], \"wall_density\": [1055,\"g/l\"], \"body_surface_area\": [1.90,\"m^2\"] } }, \"half_sarcomere\":{ \"max_rate\": [5000,\"s^-1\"], \"temperature\": [288, \"Kelvin\"], \"cb_number_density\": [6.9e16, \"number of cb's/m^2\"], \"initial_hs_length\": [900, \"nm\"], \"ATPase_activation\":[false], \"delta_energy\":[70,\"kJ/mol\"], \"avagadro_number\":[6.02e23,\"mol^-1\"], \"reference_hs_length\":[1100,\"nm\"], \"myofilaments\":{ \"kinetic_scheme\": [\"3state_with_SRX\"], \"k_1\": [2,\"s^-1\"], \"k_force\": [1e-3, \"(N^-1)(m^2)\"], \"k_2\": [200, \"s^-1\"], \"k_3\": [100, \"(nm^-1)(s^-1)\"], \"k_4_0\": [200, \"s^-1\"], \"k_4_1\": [0.1, \"nm^-4\"], \"k_cb\": [0.001, \"N*m^-1\"], \"x_ps\": [5, \"nm\"], \"k_on\": [5e8, \"(M^-1)(s^-1)\"], \"k_off\": [200, \"s^-1\"], \"k_coop\": [5], \"bin_min\": [-10, \"nm\"], \"bin_max\": [10, \"nm\"], \"bin_width\": [1, \"nm\"], \"filament_compliance_factor\": [0.5], \"thick_filament_length\": [815, \"nm\"], \"thin_filament_length\": [1120, \"nm\"], \"bare_zone_length\": [80, \"nm\"], \"k_falloff\": [0.0024], \"passive_mode\": [\"exponential\"], \"passive_exp_sigma\": [500], \"passive_exp_L\": [80], \"passive_l_slack\": [900, \"nm\"] }, \"membranes\": { \"kinetic_scheme\": [\"Ten_Tusscher_2004\"], \"simple_2_compartment\":{ \"Ca_content\": [1e-3], \"k_leak\": [2e-3], \"k_act\": [5e-2], \"k_serca\": [10.0] }, \"Ten_Tusscher_2004\":{ \"g_to_factor\": [1], \"g_Kr_factor\": [1], \"g_Ks_factor\": [1], \"Ca_a_rel_factor\": [1], \"Ca_V_leak_factor\": [1], \"Ca_Vmax_up_factor\": [1], \"g_CaL_factor\": [1] } } }, \"growth\": { \"growth_activation\": [false], \"start_index\": [200000], \"moving_average_window\": [5000], \"driven_signal\": [\"stress\"], \"concenrtric\":{ \"G_stress_driven\":[1e-6], \"G_ATPase_driven\":[-2] }, \"eccentric\":{ \"G_number_of_hs\":[-3e-6], \"G_ATPase_driven\":[0] } }, \"profiling\":{ \"profiling_activation\":[false] }, \"saving_to_spreadsheet\":{ \"saving_data_activation\":[true], \"output_data_format\":[\"csv\"], \"start_index\":[0], \"stop_index\":[17000] }, \"multi_threads\" :{ \"multithreading_activation\":[false], \"parameters_in\":{ \"G_wall_thickness\": { \"values\":[25,50,100,200,300], \"param_out\":[\"ventricle_wall_thickness\"], \"section\": [\"growth\"] }, \"G_number_of_hs\": { \"values\":[25,50,100,200,300], \"param_out\":[\"number_of_hs\"], \"section\": [\"growth\"] } }, \"output_main_folder\": [\"..\\\\temp\\\\frontier_base_simulation\\\\demo_i_j\\\\demo_i_j.json\"] } } . ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/figures_3/fig_3.html#demos",
    "relUrl": "/pages/publications/July_2020_frontiers/figures_3/fig_3.html#demos"
  },"40": {
    "doc": "Figure 3",
    "title": "Python Script",
    "content": "def range(x, axis=0): return np.max(x, axis=axis) - np.min(x, axis=axis) def display_Fig3 (data_structure, output_file_string=\"\", t_limits=[],dpi=300): # unit multipliers membrane_voltage_factor = 1000 # Convert Voltage to mili-Voltage myo_ca_transient_factor = 1e6 # Convert Mol to micro-Mol sarcomeric_force_factor = 1e-3 # Convert N to KN # y-lim thresholds pressure_lim = [0,140] # in mm Hg vol_lim = [0.005,5] # in liters vent_vol_lim = [0.05,0.20] # in liters act_lim = [0,1] # unitless mem_volt_lim = [-100,100] # in mili-Voltage myof_ca_lim = [0,1] # in micro-Mol sarc_length_lim = [860,1060] # in nano-meter sarc_force_lim = [0,40] # in kilo-pascal thin_fila_lim = [0,1] # unitless thick_fila_lim = [0,1] # unitless # Developing plots no_of_rows = 10 no_of_cols = 1 f = plt.figure(constrained_layout=True) f.set_size_inches([8, 10]) spec2 = gridspec.GridSpec(nrows=no_of_rows, ncols=no_of_cols, figure=f,width_ratios=[1]) # ***Plot pressure data*** ax1 = f.add_subplot(spec2[0, 0]) ax1.plot('time', 'pressure_ventricle', data=data_structure, label='Ventricle',color='#0470BE') ax1.plot('time', 'pressure_aorta', data=data_structure, label='Aorta',color='#D8501A') ax1.plot('time', 'pressure_arteries', data=data_structure, label='Arteries',color='#EEAF1F') ax1.plot('time', 'pressure_arterioles', data=data_structure, label='Arterioles',color='#802D90') ax1.plot('time', 'pressure_capillaries', data=data_structure, label='Capillaries',color='#75AC2F') ax1.plot('time', 'pressure_veins', data=data_structure, label='Veins',color='#4DBEEF') # remove the unnecessary ax frames ax1.spines['top'].set_visible(False) ax1.spines['right'].set_visible(False) ax1.spines['bottom'].set_visible(False) # X_axis if t_limits: ax1.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax1.set_xticks([]) # Y axis ax1.set_ylim(pressure_lim) ax1.set_yticks(pressure_lim) ax1.set_ylabel('Pressure\\n(mm Hg)', fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax1.tick_params(labelsize = 12) ax1.legend(loc=(1.02, 0.0),ncol=2,fontsize = 11,columnspacing=0.6) # ***Plot Volume data*** ax2 = f.add_subplot(spec2[1, 0]) ax2.semilogy('time', 'volume_aorta', data=data_structure, label='Aorta',color='#D8501A') ax2.semilogy('time', 'volume_arteries', data=data_structure, label='Arteries',color='#EEAF1F') ax2.semilogy('time', 'volume_arterioles', data=data_structure, label='Arterioles',color='#802D90') ax2.semilogy('time', 'volume_capillaries', data=data_structure, label='Capillaries',color='#75AC2F') ax2.semilogy('time', 'volume_veins', data=data_structure, label='Veins',color='#4DBEEF') # remove the unnecessary ax frames ax2.spines['top'].set_visible(False) ax2.spines['right'].set_visible(False) ax2.spines['bottom'].set_visible(False) # X_axis if t_limits: ax2.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax2.set_xticks([]) # Y_axis ax2.set_ylim(vol_lim) ax2.minorticks_off() y_ticks = [0.005,0.05,0.5, 5] ax2.set_yticks(y_ticks) ax2.get_yaxis().set_major_formatter(tk.FixedFormatter(seq =y_ticks)) ax2.set_ylabel('Volume\\n(liters)', fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax2.tick_params(labelsize = 12) ax2.legend(loc=(1.02, 0.0),fontsize = 11, ncol=2,columnspacing=0.6) # ***Plot vetricular volume data*** ax3 = f.add_subplot(spec2[2, 0]) ax3.plot('time', 'volume_ventricle', data=data_structure, label='Ventricle',color='#0470BE') # remove the unnecessary ax frames ax3.spines['top'].set_visible(False) ax3.spines['right'].set_visible(False) ax3.spines['bottom'].set_visible(False) # X_axis if t_limits: ax3.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax3.set_xticks([]) # Y_axis ax3.set_ylim(vent_vol_lim) ax3.set_yticks(vent_vol_lim) ax3.set_ylabel('Ventricular\\nVolume\\n(liters)', fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax3.tick_params(labelsize = 12) # ***Plot activation data*** ax4 = f.add_subplot(spec2[3, 0]) ax4.plot('time', 'activation', data=data_structure, label='Activation',color='#0470BE') # remove the unnecessary ax frames ax4.spines['top'].set_visible(False) ax4.spines['right'].set_visible(False) ax4.spines['bottom'].set_visible(False) # X_axis if t_limits: ax4.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax4.set_xticks([]) #Y_axis ax4.set_ylim(act_lim) ax4.set_yticks(act_lim) ax4.set_ylabel('Activation', fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax4.tick_params(labelsize = 12) # ***Plot membrane coltage data*** ax5 = f.add_subplot(spec2[4, 0]) # convert the y_axis from voltage to mili_voltage y_axis = data_structure['membrane_voltage']*membrane_voltage_factor x_axis = data_structure['time'] ax5.plot(x_axis, y_axis, label='Voltage',color='#0470BE') # remove the unnecessary ax frames ax5.spines['top'].set_visible(False) ax5.spines['right'].set_visible(False) ax5.spines['bottom'].set_visible(False) # X_axis if t_limits: ax5.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax5.set_xticks([]) # Y_axis ax5.set_ylim(mem_volt_lim) ax5.set_yticks([mem_volt_lim[0],0,mem_volt_lim[1]]) ax5.set_ylabel('Membrane\\nvoltage\\n(mV)', fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax5.tick_params(labelsize = 12) # ***Plot myofilament Ca transient data*** ax6 = f.add_subplot(spec2[5, 0]) # convert the y_axis from Mol to micro-Mol y_axis = data_structure['Ca_conc']*myo_ca_transient_factor x_axis = data_structure['time'] ax6.plot(x_axis, y_axis, label='Ca concentration',color='#0470BE') # remove the unnecessary ax frames ax6.spines['top'].set_visible(False) ax6.spines['right'].set_visible(False) ax6.spines['bottom'].set_visible(False) # X_axis if t_limits: ax6.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax6.set_xticks([]) # Y_axis ax6.set_ylim(myof_ca_lim) ax6.set_yticks(myof_ca_lim) ax6.set_ylabel('Myofilament\\n$[Ca^{2+}]$\\n(\\u03BCM)' , fontsize = 11,rotation=0,labelpad=20,y=0.2) # other adjustments ax6.tick_params(labelsize = 12) # ***Plot half-sarcomere length data*** ax7 = f.add_subplot(spec2[6, 0]) ax7.plot('time', 'hs_length', data=data_structure, label='hs_length',color='#0470BE') # remove the unnecessary ax frames ax7.spines['top'].set_visible(False) ax7.spines['right'].set_visible(False) ax7.spines['bottom'].set_visible(False) # X_axis if t_limits: ax7.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax7.set_xticks([]) # Y_axis ax7.set_ylim(sarc_length_lim) ax7.set_yticks(sarc_length_lim) ax7.set_ylabel('Half-sarcomere\\nlength\\n(nm)', fontsize = 11,rotation=0,labelpad=35,y=0.2) # other adjustments ax7.tick_params(labelsize = 12) # ***Plot half-sarcomere force data*** ax8 = f.add_subplot(spec2[7, 0]) # convert the y_axis from pascal to kilo-pascal y1_axis = data_structure['hs_force']*sarcomeric_force_factor y2_axis = data_structure['cb_force']*sarcomeric_force_factor y3_axis = data_structure['pas_force']*sarcomeric_force_factor x_axis = data_structure['time'] ax8.plot(x_axis, y1_axis,label='Total',color='#0470BE') ax8.plot(x_axis, y2_axis,label='Cross-bridge',color='#D8501A') ax8.plot(x_axis, y3_axis,label='Passive',color='#EEAF1F') # remove the unnecessary ax frames ax8.spines['top'].set_visible(False) ax8.spines['right'].set_visible(False) ax8.spines['bottom'].set_visible(False) # X_axis if t_limits: ax8.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax8.set_xticks([]) # Y_axis ax8.set_ylim(sarc_force_lim) ax8.set_yticks(sarc_force_lim) ax8.set_ylabel('Half-sarcomere\\nforce\\n(KN $m^{-2}$)', fontsize = 11,rotation=0,labelpad=40,y=0.2) # other adjustments ax8.tick_params(labelsize = 12) ax8.legend(loc=(1.02, 0.0),fontsize = 11,ncol=2,columnspacing=0.6) # ***Plot thin-filament data*** ax9 = f.add_subplot(spec2[8, 0]) ax9.plot('time', 'n_off', data=data_structure, label='$N_{off}$',color='#0470BE') ax9.plot('time', 'n_on', data=data_structure, label='$N_{on}$',color='#D8501A') # remove the unnecessary ax frames ax9.spines['top'].set_visible(False) ax9.spines['right'].set_visible(False) ax9.spines['bottom'].set_visible(False) # X_axis if t_limits: ax9.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax9.set_xticks([]) # Y_axis ax9.set_ylim(thin_fila_lim) ax9.set_yticks(thin_fila_lim) ax9.set_ylabel('Thin\\nfilament', fontsize = 11,rotation=0,labelpad=45,y=0.2) # other adjustments ax9.tick_params(labelsize = 12) ax9.legend(loc=(1.02, 0.0),fontsize = 11,ncol=2,columnspacing=0.6) # ***Plot thick-filament data*** ax10 = f.add_subplot(spec2[9, 0]) ax10.plot('time', 'M_OFF', data=data_structure, label='$M_{off}$',color='#0470BE') ax10.plot('time', 'M_ON', data=data_structure, label='$M_{on}$',color='#D8501A') ax10.plot('time', 'M_bound', data=data_structure, label='$M_{FG}$',color='#EEAF1F') # remove the unnecessary ax frames ax10.spines['top'].set_visible(False) ax10.spines['right'].set_visible(False) # X_axis if t_limits: ax10.set_xlim([t_limits[0]-0.02*range(t_limits),t_limits[1]]) ax10.set_xticks(t_limits) ax10.set_xlabel('Time (s)',fontsize=12) # Y_axis ax10.set_ylim(thick_fila_lim) ax10.set_yticks(thick_fila_lim) ax10.set_ylabel('Thick\\nfilament', fontsize = 11,rotation=0,labelpad=45,y=0.2) # other adjustments ax10.tick_params(labelsize = 12) ax10.legend(loc=(1.02, 0.0),fontsize = 11,ncol=2,columnspacing=0.6) # change the mathematical notatio format rcParams['mathtext.default'] = 'regular' f.align_ylabels() # save the figure if (output_file_string): save_figure_to_file(f, output_file_string, dpi) def save_figure_to_file(f, im_file_string, dpi=None, verbose=0): # Writes an image to file import os from skimage.io import imsave # Check directory exists and save image file dir_path = os.path.dirname(im_file_string) if not os.path.isdir(dir_path): os.makedirs(dir_path) if (verbose): print('Saving figure to to %s' % im_file_string) f.savefig(im_file_string, dpi=dpi) if __name__ == \"__main__\": # import required libraries import os import sys import json import pandas as pd import numpy as np import matplotlib.pyplot as plt import matplotlib.gridspec as gridspec import matplotlib.ticker as tk from matplotlib import rcParams no_of_arguments = len(sys.argv) if (no_of_arguments == 1): print('Analysis called with no inputs') elif (no_of_arguments == 2): print('Running model %s' % sys.argv[1]) data_path = sys.argv[1] data = pd.read_csv(data_path) current_directory = os.getcwd() display_Fig3(data,current_directory+'/'+'Fig_3.png',[8.4,9.4]) . ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/figures_3/fig_3.html#python-script",
    "relUrl": "/pages/publications/July_2020_frontiers/figures_3/fig_3.html#python-script"
  },"41": {
    "doc": "Figure 3",
    "title": "Output Figure",
    "content": ". ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/figures_3/fig_3.html#output-figure",
    "relUrl": "/pages/publications/July_2020_frontiers/figures_3/fig_3.html#output-figure"
  },"42": {
    "doc": "Campbell KS. et al. (2020)",
    "title": "Campbell KS. et al. (2020)",
    "content": ". | Article | Instruction Note | . ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/frontiers_2020.html",
    "relUrl": "/pages/publications/July_2020_frontiers/frontiers_2020.html"
  },"43": {
    "doc": "Campbell KS. et al. (2020)",
    "title": "Article",
    "content": ". | Title: Multiscale modeling of cardiovascular function predicts that the End-Systolic Pressure Volume Relationship can be targeted via multiple therapeutic strategies | Authors: Kenneth S. Campbell, Brianna S. Chrisman and Stuart Campbell. | Year published: 2020 | Journal: Frontiers, Computational Physiology and Medicine | doi: 10.3389/fphys.2020.01043 | . ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/frontiers_2020.html#article",
    "relUrl": "/pages/publications/July_2020_frontiers/frontiers_2020.html#article"
  },"44": {
    "doc": "Campbell KS. et al. (2020)",
    "title": "Instruction Note",
    "content": "The instruction input file for each published figures in below are provided in the pertained tab. If you run PyMyoVent using the provided input file, you will get the right output data for creating the figures published in a peer reviewed paper. In order to reproduce the figures you should follow the below steps: . | Run PyMyoVent using the provided intruction file. | Place the output data spread sheet in .csv format and the provided python script for each figure in the same directory. | Run the python script using the following format command line in the terminal. | . $ python python_script_name.py output_spread_sheet_name.csv . | The figure will be saved in the current working directory. | . ",
    "url": "http://localhost:4000/pages/publications/July_2020_frontiers/frontiers_2020.html#instruction-note",
    "relUrl": "/pages/publications/July_2020_frontiers/frontiers_2020.html#instruction-note"
  },"45": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". | Instruction | Notes | Outputs | . ",
    "url": "http://localhost:4000/pages/demos/getting_started/getting_started.html",
    "relUrl": "/pages/demos/getting_started/getting_started.html"
  },"46": {
    "doc": "Getting Started",
    "title": "Instruction",
    "content": ". | First open the PyMyoVent repository folder on your local machine. | Navigate to demo_files folder. | Open batch.json file with your favorite text editor software. If you want to get more familiar with batch.json visit this link. | In batch.json file, you need to define a job representing the getting_started demo. To do that, you need to properly change the pathway string to the main three input files as follows: . | . { \"job\": [ { \"model_file_string\": \"../demo_files/getting_started/getting_started_model.json\", \"protocol_file_string\": \"../demo_files/getting_started/getting_started_protocol.json\", \"output_handler_file_string\": \"../demo_files/getting_started/getting_started_output_handler.json\" } ] } . | Save the above changes. | Lunch Anaconda prompt if you are using a machine with windos OS. Otherwise, just open the terminal on macintosh or linux OS systems. | Navigate to Python_code folder in PyMyoVent’s repository directory using the below command: . | $ cd path_to_PyMyoVent_repo/Python_code | . | Use the following command to run the Getting_started demo. | $ python PyMyoVent.py | After a few minutes, the simulation will be completed. | . | . ",
    "url": "http://localhost:4000/pages/demos/getting_started/getting_started.html#instruction",
    "relUrl": "/pages/demos/getting_started/getting_started.html#instruction"
  },"47": {
    "doc": "Getting Started",
    "title": "Notes",
    "content": ". | This demo : . | Runs with a fixed heart rate of 70 BPM with no baroreflex control loop. | Uses a simple two compartment model as the electrophysiological model. | . | . ",
    "url": "http://localhost:4000/pages/demos/getting_started/getting_started.html#notes",
    "relUrl": "/pages/demos/getting_started/getting_started.html#notes"
  },"48": {
    "doc": "Getting Started",
    "title": "Outputs",
    "content": ". | After finishing the simulation, if you go to temp folder in PyMyoVent repository, you will see a folder named getting_started is created and it contains two files: . | output_data.csv | summary_image.png | . | The summary_image.png file should look like the below figure. | . ",
    "url": "http://localhost:4000/pages/demos/getting_started/getting_started.html#outputs",
    "relUrl": "/pages/demos/getting_started/getting_started.html#outputs"
  },"49": {
    "doc": "Growth",
    "title": "Growth",
    "content": " ",
    "url": "http://localhost:4000/pages/modules/growth/growth.html",
    "relUrl": "/pages/modules/growth/growth.html"
  },"50": {
    "doc": "Growth",
    "title": "Growth",
    "content": "With this demo you can test how the growth module can capture any change in ventricular shape in response to altered ventricular loading. ",
    "url": "http://localhost:4000/pages/demos/growth/growth.html",
    "relUrl": "/pages/demos/growth/growth.html"
  },"51": {
    "doc": "Growth Aortic Stenosis (pressure overload)",
    "title": "Growth Aortic Stenosis (pressure overload)",
    "content": ". | Instruction | Note | Instruction file | Outputs | . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_AS.html",
    "relUrl": "/pages/demos/growth/growth_AS.html"
  },"52": {
    "doc": "Growth Aortic Stenosis (pressure overload)",
    "title": "Instruction",
    "content": ". | Lunch Anaconda prompt. | Navigate to Python_code folder in PyMyoVent’s repository directory: . | $ cd path_to_PyMyoVent_repo\\Python_code | . | Use the following command to run the growth_AS demo with no perturbation in ventricular loading applied to the system. | $ python PyMyoVent.py run_defined_model ..\\demo_files\\growth_AS\\growth_AS_model.json | After around one and half an hour, the simulation would be finished. | . | . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_AS.html#instruction",
    "relUrl": "/pages/demos/growth/growth_AS.html#instruction"
  },"53": {
    "doc": "Growth Aortic Stenosis (pressure overload)",
    "title": "Note",
    "content": ". | The baroreceptor module starts to regulate the arterial pressure at \"start_index\":[5000], which can be modified by the user. | The baroreceptor module tries to maintain the mean arterial pressure at 87.7 mm Hg, as a normal level for healthy human, by regulating heart rate, myofilaments contractility, intracellular Ca handling, and vascular tone. | This model uses an electrophysiology model proposed by ten Tusscher. | The ventricular loading is perturbed to simulate the aortic stenosis condition. | The growth module is set to be activated at \"start_index\": [150000], and is able to capture any sort of ventricular growth. But in response to pressure overload condition (aortic stenosis), the ventricular wall thickness increases more than chamber dilation and hence concentric growth happens. | . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_AS.html#note",
    "relUrl": "/pages/demos/growth/growth_AS.html#note"
  },"54": {
    "doc": "Growth Aortic Stenosis (pressure overload)",
    "title": "Instruction file",
    "content": "{ \"output_parameters\": { \"input_file\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS.json\"], \"csv_file\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS.csv\"], \"summary_figure\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS_summary.png\"], \"pv_figure\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS_pv.png\"], \"flows_figure\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS_flows.png\"], \"hs_fluxes_figure\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS_hs_fluxes.png\"], \"baro_figure\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS_baro.png\"], \"circulatory\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS_arterial.png\"], \"growth_figure\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS_growth.png\"], \"growth_summary\": [\"..\\\\temp\\\\growth_AS\\\\growth_AS_growth_sum.png\"] }, \"system_control\":{ \"simulation\":{ \"no_of_time_points\": [1500000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [0.857,\"s\"] }, \"baroreceptor\":{ \"start_index\":[50000], \"N_t\":[5000], \"afferent\": { \"b_max\": [2], \"b_min\": [0], \"S\": [0.067,\"mmHg\"], \"P_set\": [87.7,\"mmHg\"] }, \"efferent\":{ \"heart_period\":{ \"G_T\": [0.07] }, \"k_1\":{ \"G_k1\": [-0.1] }, \"k_on\":{ \"G_k_on\":[0.08] }, \"ca_uptake\":{ \"G_up\": [-0.05] }, \"g_cal\":{ \"G_gcal\": [-0.07] }, \"c_venous\":{ \"G_c_venous\": [0.1] }, \"r_arteriolar\":{ \"G_r_arteriolar\": [-0.1] } } } }, \"perturbations\": { \"perturbation_activation\":[true], \"volume\":{ \"start_index\": [150000], \"stop_index\": [160000], \"increment\": [0] }, \"valve\":{ \"aortic\":{ \"start_index\": [0], \"stop_index\": [505000], \"increment\": [0.0] }, \"mitral\":{ \"start_index\": [500000], \"stop_index\": [1000000], \"increment\": [0.0] } }, \"compliance\": { \"aorta\":{ \"start_index\": [200000], \"stop_index\": [205000], \"increment\": [0] }, \"capillaries\": { \"start_index\": [200000], \"stop_index\": [205000], \"increment\": [0] }, \"venous\":{ \"start_index\": [500000], \"stop_index\": [505000], \"increment\": [0] } }, \"resistance\": { \"aorta\":{ \"start_index\": [450000], \"stop_index\": [460000], \"increment\": [0.012] }, \"capillaries\": { \"start_index\": [500000], \"stop_index\": [505000], \"increment\": [0] }, \"venous\":{ \"start_index\": [80000], \"stop_index\": [85000], \"increment\": [0.0] }, \"ventricle\":{ \"start_index\": [500000], \"stop_index\": [505000], \"increment\": [0] } }, \"myosim\":{ \"k_1\":{ \"start_index\": [25000], \"stop_index\": [25001], \"increment\": [0] }, \"k_2\":{ \"start_index\": [25000], \"stop_index\": [35000], \"increment\": [0.0] }, \"k_4_0\":{ \"start_index\": [200000], \"stop_index\": [210000], \"increment\": [0] } }, \"ca_handling\":{ \"ca_uptake\":{ \"start_index\": [40000], \"stop_index\": [41000], \"increment\": [0] }, \"ca_leak\":{ \"start_index\": [40000], \"stop_index\": [41000], \"increment\": [0] }, \"g_cal\":{ \"start_index\": [40000], \"stop_index\": [41000], \"increment\": [0] } } }, \"circulation\":{ \"no_of_compartments\": [6], \"blood\":{ \"volume\":[5,\"liters\"] }, \"aorta\":{ \"resistance\": [40,\"s\"], \"compliance\": [0.0004,\"liter_per_mmHg\"] }, \"arteries\":{ \"resistance\": [80,\"s\"], \"compliance\": [0.0009,\"liter_per_mmHg\"] }, \"arterioles\":{ \"resistance\": [400,\"s\"], \"compliance\": [0.005,\"liter_per_mmHg\"] }, \"capillaries\":{ \"resistance\": [340,\"s\"], \"compliance\": [0.03,\"liter_per_mmHg\"] }, \"veins\":{ \"resistance\": [330,\"s\"], \"compliance\": [0.5,\"liter_per_mmHg\"] }, \"ventricle\":{ \"resistance\": [10,\"s\"], \"wall_volume\": [0.1,\"liters\"], \"slack_volume\": [0.08,\"liters\"], \"wall_density\": [1055,\"g/l\"], \"body_surface_area\": [1.90,\"m^2\"] } }, \"half_sarcomere\":{ \"max_rate\": [5000,\"s^-1\"], \"temperature\": [288, \"Kelvin\"], \"cb_number_density\": [6.9e16, \"number of cb's/m^2\"], \"initial_hs_length\": [900, \"nm\"], \"ATPase_activation\":[false], \"delta_energy\":[70,\"kJ/mol\"], \"avagadro_number\":[6.02e23,\"mol^-1\"], \"reference_hs_length\":[1100,\"nm\"], \"myofilaments\":{ \"kinetic_scheme\": [\"3state_with_SRX\"], \"k_1\": [2,\"s^-1\"], \"k_force\": [0.6e-3, \"(N^-1)(m^2)\"], \"k_2\": [200, \"s^-1\"], \"k_3\": [100, \"(nm^-1)(s^-1)\"], \"k_4_0\": [200, \"s^-1\"], \"k_4_1\": [0.3, \"nm^-4\"], \"k_cb\": [0.001, \"N*m^-1\"], \"x_ps\": [5, \"nm\"], \"k_on\": [5e8, \"(M^-1)(s^-1)\"], \"k_off\": [200, \"s^-1\"], \"k_coop\": [5], \"bin_min\": [-10, \"nm\"], \"bin_max\": [10, \"nm\"], \"bin_width\": [1, \"nm\"], \"filament_compliance_factor\": [0.5], \"thick_filament_length\": [815, \"nm\"], \"thin_filament_length\": [1120, \"nm\"], \"bare_zone_length\": [80, \"nm\"], \"k_falloff\": [0.0024], \"passive_mode\": [\"exponential\"], \"passive_exp_sigma\": [300], \"passive_exp_L\": [80], \"passive_l_slack\": [900, \"nm\"] }, \"membranes\": { \"kinetic_scheme\": [\"Ten_Tusscher_2004\"], \"simple_2_compartment\":{ \"Ca_content\": [1e-3], \"k_leak\": [2e-3], \"k_act\": [5e-2], \"k_serca\": [10.0] }, \"Ten_Tusscher_2004\":{ \"g_to_factor\": [1], \"g_Kr_factor\": [1], \"g_Ks_factor\": [1], \"Ca_a_rel_factor\": [1], \"Ca_V_leak_factor\": [1], \"Ca_Vmax_up_factor\": [1], \"g_CaL_factor\": [1] } } }, \"growth\": { \"start_index\": [150000], \"moving_average_window\": [10000], \"driven_signal\": [\"stress\"], \"concenrtric\":{ \"G_stress_driven\":[10e-6], \"G_ATPase_driven\":[1] }, \"eccentric\":{ \"G_number_of_hs\":[-5e-6], \"G_ATPase_driven\":[-2] } }, \"profiling\":{ \"profiling_activation\":[false] }, \"saving_to_spreadsheet\":{ \"saving_data_activation\":[false], \"output_data_format\":[\"csv\"], \"start_index\":[0], \"stop_index\":[2000000] } } . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_AS.html#instruction-file",
    "relUrl": "/pages/demos/growth/growth_AS.html#instruction-file"
  },"55": {
    "doc": "Growth Aortic Stenosis (pressure overload)",
    "title": "Outputs",
    "content": " ",
    "url": "http://localhost:4000/pages/demos/growth/growth_AS.html#outputs",
    "relUrl": "/pages/demos/growth/growth_AS.html#outputs"
  },"56": {
    "doc": "Growth Mitral Regurgitation (volume overload)",
    "title": "Growth Mitral Regurgitation (volume overload)",
    "content": ". | Instruction | Note | Instruction file | Outputs | . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_MR.html",
    "relUrl": "/pages/demos/growth/growth_MR.html"
  },"57": {
    "doc": "Growth Mitral Regurgitation (volume overload)",
    "title": "Instruction",
    "content": ". | Lunch Anaconda prompt. | Navigate to Python_code folder in PyMyoVent’s repository directory: . | $ cd path_to_PyMyoVent_repo\\Python_code | . | Use the following command to run the growth_MR demo with no perturbation in ventricular loading applied to the system. | $ python PyMyoVent.py run_defined_model ..\\demo_files\\growth_MR\\growth_MR_model.json | After around one and half an hour, the simulation would be finished. | . | . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_MR.html#instruction",
    "relUrl": "/pages/demos/growth/growth_MR.html#instruction"
  },"58": {
    "doc": "Growth Mitral Regurgitation (volume overload)",
    "title": "Note",
    "content": ". | The baroreceptor module starts to regulate the arterial pressure at \"start_index\":[5000], which can be modified by the user. | The baroreceptor module tries to maintain the mean arterial pressure at 87.7 mm Hg, as a normal level for healthy human, by regulating heart rate, myofilaments contractility, intracellular Ca handling, and vascular tone. | This model uses an electrophysiology model proposed by ten Tusscher. | The ventricular loading is perturbed to simulate the mitral regurgitation condition. | The growth module is set to be activated at \"start_index\": [150000], and is able to capture any sort of ventricular growth. But in response to volume overload condition (mitral regurgitation), the ventricular chamber volume increases more than wall thickness and hence eccentric growth happens. | . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_MR.html#note",
    "relUrl": "/pages/demos/growth/growth_MR.html#note"
  },"59": {
    "doc": "Growth Mitral Regurgitation (volume overload)",
    "title": "Instruction file",
    "content": "{ \"output_parameters\": { \"input_file\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR.json\"], \"csv_file\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR.csv\"], \"summary_figure\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR_summary.png\"], \"pv_figure\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR_pv.png\"], \"flows_figure\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR_flows.png\"], \"hs_fluxes_figure\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR_hs_fluxes.png\"], \"baro_figure\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR_baro.png\"], \"circulatory\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR_arterial.png\"], \"growth_figure\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR_growth.png\"], \"growth_summary\": [\"..\\\\temp\\\\growth_MR\\\\growth_MR_growth_sum.png\"] }, \"system_control\":{ \"simulation\":{ \"no_of_time_points\": [1500000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [0.857,\"s\"] }, \"baroreceptor\":{ \"start_index\":[50000], \"N_t\":[5000], \"afferent\": { \"b_max\": [2], \"b_min\": [0], \"S\": [0.067,\"mmHg\"], \"P_set\": [87.7,\"mmHg\"] }, \"efferent\":{ \"heart_period\":{ \"G_T\": [0.07] }, \"k_1\":{ \"G_k1\": [-0.1] }, \"k_on\":{ \"G_k_on\":[0.08] }, \"ca_uptake\":{ \"G_up\": [-0.05] }, \"g_cal\":{ \"G_gcal\": [-0.07] }, \"c_venous\":{ \"G_c_venous\": [0.1] }, \"r_arteriolar\":{ \"G_r_arteriolar\": [-0.1] } } } }, \"perturbations\": { \"perturbation_activation\":[true], \"volume\":{ \"start_index\": [150000], \"stop_index\": [160000], \"increment\": [0] }, \"valve\":{ \"aortic\":{ \"start_index\": [0], \"stop_index\": [505000], \"increment\": [0.0] }, \"mitral\":{ \"start_index\": [500000], \"stop_index\": [1500000], \"increment\": [0.03] } }, \"compliance\": { \"aorta\":{ \"start_index\": [200000], \"stop_index\": [205000], \"increment\": [0] }, \"capillaries\": { \"start_index\": [200000], \"stop_index\": [205000], \"increment\": [0] }, \"venous\":{ \"start_index\": [500000], \"stop_index\": [505000], \"increment\": [0] } }, \"resistance\": { \"aorta\":{ \"start_index\": [450000], \"stop_index\": [460000], \"increment\": [0.0] }, \"capillaries\": { \"start_index\": [500000], \"stop_index\": [505000], \"increment\": [0] }, \"venous\":{ \"start_index\": [80000], \"stop_index\": [85000], \"increment\": [0.0] }, \"ventricle\":{ \"start_index\": [500000], \"stop_index\": [505000], \"increment\": [0] } }, \"myosim\":{ \"k_1\":{ \"start_index\": [25000], \"stop_index\": [25001], \"increment\": [0] }, \"k_2\":{ \"start_index\": [25000], \"stop_index\": [35000], \"increment\": [0.0] }, \"k_4_0\":{ \"start_index\": [200000], \"stop_index\": [210000], \"increment\": [0] } }, \"ca_handling\":{ \"ca_uptake\":{ \"start_index\": [40000], \"stop_index\": [41000], \"increment\": [0] }, \"ca_leak\":{ \"start_index\": [40000], \"stop_index\": [41000], \"increment\": [0] }, \"g_cal\":{ \"start_index\": [40000], \"stop_index\": [41000], \"increment\": [0] } } }, \"circulation\":{ \"no_of_compartments\": [6], \"blood\":{ \"volume\":[5,\"liters\"] }, \"aorta\":{ \"resistance\": [40,\"s\"], \"compliance\": [0.0004,\"liter_per_mmHg\"] }, \"arteries\":{ \"resistance\": [80,\"s\"], \"compliance\": [0.0009,\"liter_per_mmHg\"] }, \"arterioles\":{ \"resistance\": [400,\"s\"], \"compliance\": [0.005,\"liter_per_mmHg\"] }, \"capillaries\":{ \"resistance\": [340,\"s\"], \"compliance\": [0.03,\"liter_per_mmHg\"] }, \"veins\":{ \"resistance\": [330,\"s\"], \"compliance\": [0.5,\"liter_per_mmHg\"] }, \"ventricle\":{ \"resistance\": [10,\"s\"], \"wall_volume\": [0.1,\"liters\"], \"slack_volume\": [0.08,\"liters\"], \"wall_density\": [1055,\"g/l\"], \"body_surface_area\": [1.90,\"m^2\"] } }, \"half_sarcomere\":{ \"max_rate\": [5000,\"s^-1\"], \"temperature\": [288, \"Kelvin\"], \"cb_number_density\": [6.9e16, \"number of cb's/m^2\"], \"initial_hs_length\": [900, \"nm\"], \"ATPase_activation\":[false], \"delta_energy\":[70,\"kJ/mol\"], \"avagadro_number\":[6.02e23,\"mol^-1\"], \"reference_hs_length\":[1100,\"nm\"], \"myofilaments\":{ \"kinetic_scheme\": [\"3state_with_SRX\"], \"k_1\": [2,\"s^-1\"], \"k_force\": [0.6e-3, \"(N^-1)(m^2)\"], \"k_2\": [200, \"s^-1\"], \"k_3\": [100, \"(nm^-1)(s^-1)\"], \"k_4_0\": [200, \"s^-1\"], \"k_4_1\": [0.3, \"nm^-4\"], \"k_cb\": [0.001, \"N*m^-1\"], \"x_ps\": [5, \"nm\"], \"k_on\": [5e8, \"(M^-1)(s^-1)\"], \"k_off\": [200, \"s^-1\"], \"k_coop\": [5], \"bin_min\": [-10, \"nm\"], \"bin_max\": [10, \"nm\"], \"bin_width\": [1, \"nm\"], \"filament_compliance_factor\": [0.5], \"thick_filament_length\": [815, \"nm\"], \"thin_filament_length\": [1120, \"nm\"], \"bare_zone_length\": [80, \"nm\"], \"k_falloff\": [0.0024], \"passive_mode\": [\"exponential\"], \"passive_exp_sigma\": [300], \"passive_exp_L\": [80], \"passive_l_slack\": [900, \"nm\"] }, \"membranes\": { \"kinetic_scheme\": [\"Ten_Tusscher_2004\"], \"simple_2_compartment\":{ \"Ca_content\": [1e-3], \"k_leak\": [2e-3], \"k_act\": [5e-2], \"k_serca\": [10.0] }, \"Ten_Tusscher_2004\":{ \"g_to_factor\": [1], \"g_Kr_factor\": [1], \"g_Ks_factor\": [1], \"Ca_a_rel_factor\": [1], \"Ca_V_leak_factor\": [1], \"Ca_Vmax_up_factor\": [1], \"g_CaL_factor\": [1] } } }, \"growth\": { \"start_index\": [150000], \"moving_average_window\": [10000], \"driven_signal\": [\"stress\"], \"concenrtric\":{ \"G_stress_driven\":[10e-6], \"G_ATPase_driven\":[1] }, \"eccentric\":{ \"G_number_of_hs\":[-5e-6], \"G_ATPase_driven\":[-2] } }, \"profiling\":{ \"profiling_activation\":[false] }, \"saving_to_spreadsheet\":{ \"saving_data_activation\":[false], \"output_data_format\":[\"csv\"], \"start_index\":[0], \"stop_index\":[2000000] } } . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_MR.html#instruction-file",
    "relUrl": "/pages/demos/growth/growth_MR.html#instruction-file"
  },"60": {
    "doc": "Growth Mitral Regurgitation (volume overload)",
    "title": "Outputs",
    "content": " ",
    "url": "http://localhost:4000/pages/demos/growth/growth_MR.html#outputs",
    "relUrl": "/pages/demos/growth/growth_MR.html#outputs"
  },"61": {
    "doc": "Growth normal",
    "title": "Growth normal",
    "content": ". | Growth normal . | Instruction | Note | Instruction file | Outputs | . | . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_normal.html",
    "relUrl": "/pages/demos/growth/growth_normal.html"
  },"62": {
    "doc": "Growth normal",
    "title": "Instruction",
    "content": ". | Lunch Anaconda prompt. | Navigate to Python_code folder in PyMyoVent’s repository directory: . | $ cd path_to_PyMyoVent_repo\\Python_code | . | Use the following command to run the growth_normal demo with no perturbation in ventricular loading applied to the system. | $ python PyMyoVent.py run_defined_model ..\\demo_files\\growth_normal\\growth_normal_model.json | After around one and half an hour, the simulation would be finished. | . | . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_normal.html#instruction",
    "relUrl": "/pages/demos/growth/growth_normal.html#instruction"
  },"63": {
    "doc": "Growth normal",
    "title": "Note",
    "content": ". | The baroreceptor module starts to regulate the arterial pressure at \"start_index\":[5000], which can be modified by the user. | The baroreceptor module tries to maintain the mean arterial pressure at 87.7 mm Hg, as a normal level for healthy human, by regulating heart rate, myofilaments contractility, intracellular Ca handling, and vascular tone. | This model uses an electrophysiology model proposed by ten Tusscher. | The ventricular loading is normal and no perturbation has applied. | The growth module starts to allow the ventricle to adapt its size and shape in response to any change in ventricular loading after \"start_index\": [150000], which can be changed by the user. | Growth module is able to capture both types of cardiac growth, namely concentric and eccentric. | . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_normal.html#note",
    "relUrl": "/pages/demos/growth/growth_normal.html#note"
  },"64": {
    "doc": "Growth normal",
    "title": "Instruction file",
    "content": "{ \"output_parameters\": { \"input_file\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal.json\"], \"csv_file\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal.csv\"], \"summary_figure\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal_summary.png\"], \"pv_figure\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal_pv.png\"], \"flows_figure\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal_flows.png\"], \"hs_fluxes_figure\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal_hs_fluxes.png\"], \"baro_figure\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal_baro.png\"], \"circulatory\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal_arterial.png\"], \"growth_figure\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal_growth.png\"], \"growth_summary\": [\"..\\\\temp\\\\growth_normal\\\\growth_normal_growth_sum.png\"] }, \"system_control\":{ \"simulation\":{ \"no_of_time_points\": [1500000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [0.857,\"s\"] }, \"baroreceptor\":{ \"start_index\":[50000], \"N_t\":[5000], \"afferent\": { \"b_max\": [2], \"b_min\": [0], \"S\": [0.067,\"mmHg\"], \"P_set\": [87.7,\"mmHg\"] }, \"efferent\":{ \"heart_period\":{ \"G_T\": [0.07] }, \"k_1\":{ \"G_k1\": [-0.1] }, \"k_on\":{ \"G_k_on\":[0.08] }, \"ca_uptake\":{ \"G_up\": [-0.05] }, \"g_cal\":{ \"G_gcal\": [-0.07] }, \"c_venous\":{ \"G_c_venous\": [0.1] }, \"r_arteriolar\":{ \"G_r_arteriolar\": [-0.1] } } } }, \"circulation\":{ \"no_of_compartments\": [6], \"blood\":{ \"volume\":[5,\"liters\"] }, \"aorta\":{ \"resistance\": [40,\"s\"], \"compliance\": [0.0004,\"liter_per_mmHg\"] }, \"arteries\":{ \"resistance\": [80,\"s\"], \"compliance\": [0.0009,\"liter_per_mmHg\"] }, \"arterioles\":{ \"resistance\": [400,\"s\"], \"compliance\": [0.005,\"liter_per_mmHg\"] }, \"capillaries\":{ \"resistance\": [340,\"s\"], \"compliance\": [0.03,\"liter_per_mmHg\"] }, \"veins\":{ \"resistance\": [330,\"s\"], \"compliance\": [0.5,\"liter_per_mmHg\"] }, \"ventricle\":{ \"resistance\": [10,\"s\"], \"wall_volume\": [0.1,\"liters\"], \"slack_volume\": [0.08,\"liters\"], \"wall_density\": [1055,\"g/l\"], \"body_surface_area\": [1.90,\"m^2\"] } }, \"half_sarcomere\":{ \"max_rate\": [5000,\"s^-1\"], \"temperature\": [288, \"Kelvin\"], \"cb_number_density\": [6.9e16, \"number of cb's/m^2\"], \"initial_hs_length\": [900, \"nm\"], \"ATPase_activation\":[false], \"delta_energy\":[70,\"kJ/mol\"], \"avagadro_number\":[6.02e23,\"mol^-1\"], \"reference_hs_length\":[1100,\"nm\"], \"myofilaments\":{ \"kinetic_scheme\": [\"3state_with_SRX\"], \"k_1\": [2,\"s^-1\"], \"k_force\": [0.6e-3, \"(N^-1)(m^2)\"], \"k_2\": [200, \"s^-1\"], \"k_3\": [100, \"(nm^-1)(s^-1)\"], \"k_4_0\": [200, \"s^-1\"], \"k_4_1\": [0.3, \"nm^-4\"], \"k_cb\": [0.001, \"N*m^-1\"], \"x_ps\": [5, \"nm\"], \"k_on\": [5e8, \"(M^-1)(s^-1)\"], \"k_off\": [200, \"s^-1\"], \"k_coop\": [5], \"bin_min\": [-10, \"nm\"], \"bin_max\": [10, \"nm\"], \"bin_width\": [1, \"nm\"], \"filament_compliance_factor\": [0.5], \"thick_filament_length\": [815, \"nm\"], \"thin_filament_length\": [1120, \"nm\"], \"bare_zone_length\": [80, \"nm\"], \"k_falloff\": [0.0024], \"passive_mode\": [\"exponential\"], \"passive_exp_sigma\": [300], \"passive_exp_L\": [80], \"passive_l_slack\": [900, \"nm\"] }, \"membranes\": { \"kinetic_scheme\": [\"Ten_Tusscher_2004\"], \"simple_2_compartment\":{ \"Ca_content\": [1e-3], \"k_leak\": [2e-3], \"k_act\": [5e-2], \"k_serca\": [10.0] }, \"Ten_Tusscher_2004\":{ \"g_to_factor\": [1], \"g_Kr_factor\": [1], \"g_Ks_factor\": [1], \"Ca_a_rel_factor\": [1], \"Ca_V_leak_factor\": [1], \"Ca_Vmax_up_factor\": [1], \"g_CaL_factor\": [1] } } }, \"growth\": { \"start_index\": [150000], \"moving_average_window\": [10000], \"driven_signal\": [\"stress\"], \"concenrtric\":{ \"G_stress_driven\":[5e-6], \"G_ATPase_driven\":[1] }, \"eccentric\":{ \"G_number_of_hs\":[-5e-6], \"G_ATPase_driven\":[-2] } }, \"profiling\":{ \"profiling_activation\":[false] }, \"saving_to_spreadsheet\":{ \"saving_data_activation\":[false], \"output_data_format\":[\"csv\"], \"start_index\":[0], \"stop_index\":[2000000] } } . ",
    "url": "http://localhost:4000/pages/demos/growth/growth_normal.html#instruction-file",
    "relUrl": "/pages/demos/growth/growth_normal.html#instruction-file"
  },"65": {
    "doc": "Growth normal",
    "title": "Outputs",
    "content": " ",
    "url": "http://localhost:4000/pages/demos/growth/growth_normal.html#outputs",
    "relUrl": "/pages/demos/growth/growth_normal.html#outputs"
  },"66": {
    "doc": "Help",
    "title": "Help",
    "content": "If you encounter a problem, we recommend the following strategies: . | Take a step back, and make sure you can run the demos. | Getting started is a good place to start. | . | If that doesn’t work, submit an issue . | Do you want to know how to submit an issue? | . | . ",
    "url": "http://localhost:4000/pages/help/help.html",
    "relUrl": "/pages/help/help.html"
  },"67": {
    "doc": "PyMyoVent",
    "title": "PyMyoVent",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"68": {
    "doc": "PyMyoVent",
    "title": "Overview",
    "content": "This is the homepage for PyMyoVent, software written in Python that simulates a single ventricle pumping blood through a closed circulation. PyMyoVent is a multiscaled model that bridges from molecular to organ-level function. More information about the different components is provided at Modules. Key contributors to the project are listed on the Team page. ",
    "url": "http://localhost:4000/#overview",
    "relUrl": "/#overview"
  },"69": {
    "doc": "PyMyoVent",
    "title": "Example simulation",
    "content": ". ",
    "url": "http://localhost:4000/#example-simulation",
    "relUrl": "/#example-simulation"
  },"70": {
    "doc": "PyMyoVent",
    "title": "Getting started",
    "content": "To get started: . | 1- Get familiar with how to setup the required environment. | 2- Then try Getting Started. | . ",
    "url": "http://localhost:4000/#getting-started",
    "relUrl": "/#getting-started"
  },"71": {
    "doc": "Model",
    "title": "Model",
    "content": ". | circulation | heart_rate | half_sarcomere | . | Model file contains the model parameters that are essential for each module. These parameters can either change (due to applied perturbation) or be constant throughout a simulation. | The three essential block structures for each simulation are circulation, heart_rate, and half_sarcomere. So all model files SHOULD include these block structures. Other supplementary block structures like baroreflex, or growth are optional and can be added or removed based on the purpose of the simulation. | The following is an example of model_file.json including only the three main blocks. The user can change the parameter values optionally. | The parameters for each block are explained in the following of this page. | . { \"circulation\":{ \"blood_volume\": 3.65, \"compartments\": [ { \"name\": \"aorta\", \"resistance\": 40, \"compliance\": 5e-4 }, { \"name\": \"arteries\", \"resistance\": 40, \"compliance\": 5e-4 }, { \"name\": \"arterioles\", \"resistance\": 800, \"compliance\": 1e-4 }, { \"name\": \"capillaries\", \"resistance\": 200, \"compliance\": 2e-4 }, { \"name\": \"venules\", \"resistance\": 30, \"compliance\": 0.05 }, { \"name\": \"veins\", \"resistance\": 30, \"compliance\": 0.3 }, { \"name\": \"ventricle\", \"resistance\": 20, \"wall_volume\": 0.1, \"slack_volume\": 0.03, \"wall_density\": 1055 } ] }, \"heart_rate\": { \"t_active_period\": 0.003, \"t_quiescent_period\": 0.854, \"t_first_activation\": 0.1 }, \"half_sarcomere\":{ \"initial_hs_length\": 900, \"reference_hs_length\": 1100, \"membranes\": { \"Ca_content\": 1e-3, \"k_leak\": 5e-4, \"k_act\": 1.5e-2, \"k_serca\": 10.0, \"t_open\": 0.1, \"implementation\":{ \"kinetic_scheme\": \"simple_2_compartment\" } }, \"myofilaments\":{ \"cb_number_density\": 6.9e16, \"k_1\": 2, \"k_force\": 1e-3, \"k_2\": 200, \"k_3\": 100, \"k_4_0\": 150, \"k_4_1\": 0.1, \"k_cb\": 0.001, \"x_ps\": 5, \"k_on\": 2e8, \"k_off\": 200, \"k_coop\": 5, \"passive_exp_sigma\": 200, \"passive_exp_L\": 70, \"passive_l_slack\": 900, \"implementation\": { \"kinetic_scheme\": \"3_state_with_SRX\", \"passive_mode\": \"exponential\", \"max_rate\": 5000, \"temperature\": 310, \"bin_min\": -10, \"bin_max\": 10, \"bin_width\": 1, \"filament_compliance_factor\": 0.5, \"thick_filament_length\": 815, \"thin_filament_length\": 1120, \"bare_zone_length\": 80 } } } } . ",
    "url": "http://localhost:4000/pages/structures/model/model.html",
    "relUrl": "/pages/structures/model/model.html"
  },"72": {
    "doc": "Model",
    "title": "circulation",
    "content": "This block contains the model parameters for the systemic circulation module. | blood_volume : Total blood volume in the systemic circulatory system in liters. | compartments : List of included compartments with their relative resistance and compliance factors. | Note: For ventricle compartment, user needs to define wall_volume in liters, ventricle slack_volume in liters, and wall_density in g/liters. | . ",
    "url": "http://localhost:4000/pages/structures/model/model.html#circulation",
    "relUrl": "/pages/structures/model/model.html#circulation"
  },"73": {
    "doc": "Model",
    "title": "heart_rate",
    "content": "This block contains the required parameters for calculating the heart rate. | t_active_period : Duration of activation pulse in seconds. | t_quiescent_period : Duration of non-activated phase of a cardiac cycle in seconds. | t_first_activation : Activating time of the initiative pulse in seconds. | . ",
    "url": "http://localhost:4000/pages/structures/model/model.html#heart_rate",
    "relUrl": "/pages/structures/model/model.html#heart_rate"
  },"74": {
    "doc": "Model",
    "title": "half_sarcomere",
    "content": "This block contains model parameters for MyoSim model of contraction. | initial_hs_length : Initial length of a half-sarcomere embedded in the circumference of the ventricle. | reference_hs_length : Reference length of a half-sarcomere. | membranes : This sub-block contains model parameters for model of the membrane electrophysiology. | Ca_content : Total Ca content in the myocardial cell. | k_leak : Rate factor of Ca leak current from Sarcoplasmic Reticulum. | k_act : Rate factor of Ca activation current from Sarcoplasmic Reticulum. | k_serca : Rate factor of SERCA Ca current back to Sarcoplasmic Reticulum. | t_open : Time duration in which the RyR channel is open. | implementation : . | kinetic_scheme : Kinetic scheme for the electrophysiology model. | . | . | myofilaments: This sub-block contains model parameters for dynamically-coupled interaction of myofilaments. | cb_number_density : Number of myosin heads in a hypothetical cardiac half-sarcomere with a cross-sectional area of 1 m2. | k_1 : Activation rate factor of myosin heads from SRX to DRX states. | k_force : Force dependent activation rate factor of myosin heads. | k_2 : Deactivation rate factor of myosin heads from DRX to SRX states. | k_3 : Attachment rate factor of myosin heads from SRX to Force Generating states. | k_4_0 : Detachment rate factor of myosin heads from Force Generating to SRX states. | k_4_1 : Strain dependent detachment rate factor of myosin heads from Force Generating to SRX states. | k_cb : The cross-bridge stiffness factor. | x_ps : The power stroke of an attached cross-bridge. | k_on : The activation rate factor of binding sites on thin filaments. | k_off : The deactivation rate factor of binding sites on thin filaments. | k_coop : The cooperativity factor of thin filaments. | passive_exp_sigma : The sigma constant factor. | passive_exp_L : The constant factor that sets the curvature of the relationship. | passive_l_slack : Slack length of half-sarcomere. | implementation : . | kinetic_scheme : Kinetic scheme of myofilaments interaction. | passive_mode : Switch control for the passive behavior of half-sarcomeres. | max_rate : A float defining the maximum rate considered in the simulations. Rate values above this will be limited to max_rate. | temperature : The temperature in Kelvin | bin_min : The minimum possible value of x in nm for the cross-bridge distribution. | bin_max : The maximum possible value of x in nm for the cross-bridge distribution. | bin_width : The width of bins in the cross-bridge distribution. Smaller values of bin_width give cross-bridge distributions with finer resolution but take longer to calculate. | filament_compliance_factor : The compliance factor of myofilaments. | thick_filament_length : The length of thick myofilament in nm. | thin_filament_length : The length of thin myofilament in nm. | bare_zone_length : The length of bare zone. | . | . | . ",
    "url": "http://localhost:4000/pages/structures/model/model.html#half_sarcomere",
    "relUrl": "/pages/structures/model/model.html#half_sarcomere"
  },"75": {
    "doc": "Modules",
    "title": "Modules",
    "content": "PyMyoVent is built on a number of sub-modules representing diffetent functionality of the software in various scale levels. ",
    "url": "http://localhost:4000/pages/modules/modules.html",
    "relUrl": "/pages/modules/modules.html"
  },"76": {
    "doc": "Output handler",
    "title": "Output handler",
    "content": ". | Output handler | . ",
    "url": "http://localhost:4000/pages/structures/output_handler/output_handler.html",
    "relUrl": "/pages/structures/output_handler/output_handler.html"
  },"77": {
    "doc": "Output handler",
    "title": "Output handler",
    "content": ". | Output-handler accounts for handling the output files from a simulation. The output data can be stored in a spread sheet with extension format of .csv or .excel by defining simulation_output_file_string in the output handler file. Also the output data can be visualized in a default format by defining summary_image_file_string as the pathway directory for saving the summary_image.png. | A user can define more user_defined figures in multipanel format by defining two parameters: . | . | template_file_string : Path to the directory where the template for multipanel format in JSON format is located. | output_file_string : Path to the directory where a user wants to save the user_defined figure in multipanel format. | . { \"simulation_output_file_string\": \"path_to_output_data.csv\", \"summary_image_file_string\": \"path_to_summary_figure.png\", \"user_defined_images\": { \"user_defined\": [ { \"template_file_string\": \"path_to_template_file.json\", \"output_file_string\": \"path_to_user_defined_figure.png\" } ] } } . ",
    "url": "http://localhost:4000/pages/structures/output_handler/output_handler.html",
    "relUrl": "/pages/structures/output_handler/output_handler.html"
  },"78": {
    "doc": "Perturbation",
    "title": "Perturbation",
    "content": ". | Overview | Theory . | Parameters | . | . ",
    "url": "http://localhost:4000/pages/modules/perturbation/perturbation.html",
    "relUrl": "/pages/modules/perturbation/perturbation.html"
  },"79": {
    "doc": "Perturbation",
    "title": "Overview",
    "content": "This module is developed to control different types of perturbation and the way they are being applied to a simulation. ",
    "url": "http://localhost:4000/pages/modules/perturbation/perturbation.html#overview",
    "relUrl": "/pages/modules/perturbation/perturbation.html#overview"
  },"80": {
    "doc": "Perturbation",
    "title": "Theory",
    "content": ". | The Perturbation module can perturb a simulation from molecular level (e.g. the attachment rate constant of myosin heads to the binding sites in actin, k_3) to the organ level (e.g. blood volume perturbation and hemorrhage condition). | Each type of perturbation is defined with three parameters: . | start_index: Starting time index for the perturbation to be applied. | stop_index: Stopping time index for the perturbation to be applied. | increment: The inceremental value to be added at each time step during perturbation time. | . | . Parameters . \"perturbations\": { \"perturbation_activation\":[false], \"volume\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"valve\":{ \"aortic\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"mitral\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] } }, \"compliance\": { \"aorta\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"capillaries\": { \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"venous\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] } }, \"resistance\": { \"aorta\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"capillaries\": { \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"venous\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"ventricle\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] } }, \"myosim\":{ \"k_1\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"k_2\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"k_4_0\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] } }, \"ca_handling\":{ \"ca_uptake\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"ca_leak\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] }, \"g_cal\":{ \"start_index\": [], \"stop_index\": [], \"increment\": [0] } } }, . ",
    "url": "http://localhost:4000/pages/modules/perturbation/perturbation.html#theory",
    "relUrl": "/pages/modules/perturbation/perturbation.html#theory"
  },"81": {
    "doc": "Protocol",
    "title": "Protocol",
    "content": ". | Protocol | . ",
    "url": "http://localhost:4000/pages/structures/protocol/protocol.html",
    "relUrl": "/pages/structures/protocol/protocol.html"
  },"82": {
    "doc": "Protocol",
    "title": "Protocol",
    "content": ". | Protocol file handles how a simulation runs. In the simplest way, the user needs to define the number of time steps, no_of_time_steps, and the resolution of simulation, time_step. Additionally, an individual user can define different types of perturbation (e.g. blood volume perturbation), or activation time slots for supplementary modules like baroreflex and/or growth. | For example, the following protocol file enforces a simulation of 100 seconds with no_of_time_steps: 10000 and time_step: 0.001. Furthermore, this file contains a perturbation block that implies a perturbation of blood volume from starting time of t_start_s: 25 up to t_stop_s: 30 with total_change: 1 liter. | The baroreflex block in this file accounts for activation time slot for the baroreflex module. An individual user can change the protocol file according to his/her research protocol. | . { \"protocol\":{ \"no_of_time_steps\": 100000, \"time_step\": 0.001 }, \"perturbations\": { \"perturbation\": [ { \"variable\": \"blood_volume\", \"t_start_s\": 25, \"t_stop_s\": 30, \"total_change\": 1 } ] }, \"baroreflex\": { \"activations\": [ { \"t_start_s\": 10, \"t_stop_s\": 100 } ] } } . ",
    "url": "http://localhost:4000/pages/structures/protocol/protocol.html",
    "relUrl": "/pages/structures/protocol/protocol.html"
  },"83": {
    "doc": "Publications",
    "title": "Publications",
    "content": "Here are the list of peer reviewed articles built on PyMyoVent framework. Each sub-folder include the utilized demos and “Analyze” scripts for generating the published figures and tables. ",
    "url": "http://localhost:4000/pages/publications/publications.html",
    "relUrl": "/pages/publications/publications.html"
  },"84": {
    "doc": "Single Ventricle",
    "title": "Single Ventricle",
    "content": ". | Overview | Theory | . ",
    "url": "http://localhost:4000/pages/modules/single_ventricle/single_ventricle.html",
    "relUrl": "/pages/modules/single_ventricle/single_ventricle.html"
  },"85": {
    "doc": "Single Ventricle",
    "title": "Overview",
    "content": "The Single Ventricle module is originally adopted by Campbell KB. et al. where they assumed a thin walled hemispherical geometry for the left ventricle. PyMyoVent uses similar assumption and considers the whole heart as a single hemispherical left ventricle. In this model the half-sarcomeres are assumed to be circumferentially oriented at the basal mid-wall of the hemisphere, i.e., the mid-transmural wall in the middle of the LV wall thickness. | Single ventricle geometry adopted from Campbell KB. et al. work. ",
    "url": "http://localhost:4000/pages/modules/single_ventricle/single_ventricle.html#overview",
    "relUrl": "/pages/modules/single_ventricle/single_ventricle.html#overview"
  },"86": {
    "doc": "Single Ventricle",
    "title": "Theory",
    "content": "| . This module, in particular, governs two characteristics of the ventricle: . | The associated change in half-sarcomeres length due to the change in ventricular volume. | The associated mid-wall radius to the hemispherical volume, which is related to the LV cavity volume and half of the LV wall volume can be defined as follows: | . | Where: . | Vventricle is the cavity volume of the ventricle derived from the circulatory module. | Wvolume is the volume of ventricle wall. | . | The associated circumference of mid-wall at the basal level is defined with the following equation. The change in the mid-wall circumference enforces the change in the half-sarcomeres length. | . | And finally the ventricular wall thickness is determined with: | . | Where: . | ri is the internal radius of the left ventricle. | . | . | The ventricular pressure according to Laplace’s law. | Where: . | ri is the internal radius of the left ventricle. | Wthickness is the ventricular wall thickness. | Ftotal is the total stress in the half-sarcomeres. | . | . | . ",
    "url": "http://localhost:4000/pages/modules/single_ventricle/single_ventricle.html#theory",
    "relUrl": "/pages/modules/single_ventricle/single_ventricle.html#theory"
  },"87": {
    "doc": "Structures",
    "title": "Structures",
    "content": ". | Overview | Batch | . ",
    "url": "http://localhost:4000/pages/structures/structures.html",
    "relUrl": "/pages/structures/structures.html"
  },"88": {
    "doc": "Structures",
    "title": "Overview",
    "content": ". | In general, each PyMyoVent simulation is divided into three separated parts, in which the user has control on them via defining three main text files in JSON format: | . | Model file | Protocol file | Output handler file | . | For running a simulation with PyMyoVent, the user needs to define the pathway strings to the location of these three user-defined files in the batch.json file located in path_to_PyMyoVent_repo/dmo_files directory. | . ",
    "url": "http://localhost:4000/pages/structures/structures.html#overview",
    "relUrl": "/pages/structures/structures.html#overview"
  },"89": {
    "doc": "Structures",
    "title": "Batch",
    "content": ". | In batch file, each single simulation is defined as a job that contains the pathway strings to the location of three types of input text file in JSON format: . | For example, the following batch file includes one job representing one simulation. | . { \"PyMyoVent_batch\": { \"job\": [ { \"model_file_string\": \"path_to_model_file.json\", \"protocol_file_string\": \"path_to_protocol_file.json\", \"output_handler_file_string\": \"path_to_output_handler_file.json\" } ] } } . | Or the following batch file includes multiple jobs: | . { \"PyMyoVent_batch\": { \"job\": [ { \"model_file_string\": \"path_to_model_file_1.json\", \"protocol_file_string\": \"path_to_protocol_file_1.json\", \"output_handler_file_string\": \"path_to_output_handler_file_1.json\" }, { \"model_file_string\": \"path_to_model_file_2.json\", \"protocol_file_string\": \"path_to_protocol_file_2.json\", \"output_handler_file_string\": \"path_to_output_handler_file_2.json\" }, { \"model_file_string\": \"path_to_model_file_3.json\", \"protocol_file_string\": \"path_to_protocol_file_3.json\", \"output_handler_file_string\": \"path_to_output_handler_file_3.json\" } ] } } . ",
    "url": "http://localhost:4000/pages/structures/structures.html#batch",
    "relUrl": "/pages/structures/structures.html#batch"
  },"90": {
    "doc": "How to submit an issue",
    "title": "How to submit an issue",
    "content": "Okay, something has gone wrong, you’ve worked through running demos, and you’ve come to the conclusion that there is a problem with the code. | Go to the PyMyoVent respository . | Click on the Issues tab . | Click on the Green “New issue” button . | . ",
    "url": "http://localhost:4000/pages/help/submit_an_issue.html",
    "relUrl": "/pages/help/submit_an_issue.html"
  },"91": {
    "doc": "System Control",
    "title": "System Control",
    "content": ". | Overview | Theory . | Fixed heart rate . | Parameters | . | Simple baroreceptor . | Parameters | . | . | . ",
    "url": "http://localhost:4000/pages/modules/system_control/system_control.html",
    "relUrl": "/pages/modules/system_control/system_control.html"
  },"92": {
    "doc": "System Control",
    "title": "Overview",
    "content": "This module controls how a single simulation should be run and whether the simulation needs being controlled or not. So far, there are two approaches implemented into the System Control module, but any new approach can be easily added. ",
    "url": "http://localhost:4000/pages/modules/system_control/system_control.html#overview",
    "relUrl": "/pages/modules/system_control/system_control.html#overview"
  },"93": {
    "doc": "System Control",
    "title": "Theory",
    "content": "In general, System Control governs a simulation’s running time, resolution, and the stimulus puls. But based on the complexity level, an indiviual user can select between two approached implemented so far: . | Fixed heart rate approch | Simple baroreceptor approach | . Fixed heart rate . | This approach assumes a simulation runs with a constant heart rate. The activation pulse is defined based on a periodic square-wave waveform. | . | An individual user can define the signal period and also the signal stimulus duration (i.e. duty ratio) at each period. | The resolution of simulation is defined with time_step parameter. The finer the resolution, the more precise the results get, but it takes a longer simulation time. | . Parameters . \"fixed_heart_rate\":{ \"simulation\":{ \"no_of_time_points\": [5000], \"time_step\": [0.001], \"duty_ratio\": [0.3], \"basal_heart_period\": [1,\"s\"] } }, . | Despite the Simple Baroreceptor approach, this method does not regulate any parameter in the simulation due to any perturbation. Hence, the simulation | . Simple baroreceptor . Parameters . \"simple_baroreceptor\":{ \"simulation\":{ \"start_index\":[2000], \"memory\":[2,\"s\"], \"no_of_time_points\": [15000], \"time_step\": [0.001], \"duty_ratio\": [0.003], \"basal_heart_period\": [1,\"s\"] }, \"afferent\": { \"b_max\": [2], \"b_min\": [0], \"S\": [0.067,\"mmHg\"], \"P_n\": [90,\"mmHg\"] }, \"regulation\":{ \"heart_period\":{ \"G_T\": [0.03] }, \"k_1\":{ \"G_k1\": [-0.05] }, \"k_3\":{ \"G_k3\": [-0.0] }, \"k_on\":{ \"G_k_on\":[0.02] }, \"ca_uptake\":{ \"G_up\": [-0.02] }, \"g_cal\":{ \"G_gcal\": [-0.03] } } } . ",
    "url": "http://localhost:4000/pages/modules/system_control/system_control.html#theory",
    "relUrl": "/pages/modules/system_control/system_control.html#theory"
  },"94": {
    "doc": "Team",
    "title": "Team",
    "content": "Key contributors to the PyMyoVent project include: . | Ken Campbell . | leads the overall project | developed the MyoSim model | wrote the first version of PyMyoVent | . | Stuart Campbell . | developed a prototype model | helped write the first publication | . | Jonathan Wenk . | directs current research at the University of Kentucky | . | Brianna Chrisman . | wrote the first prototype of the modeling software as an undergraduate student with Stuart Campbell. | . | Hossein Sharifi . | lead developer at the University of Kentucky | developed the baroreceptor and growth modules | . | . ",
    "url": "http://localhost:4000/pages/team/team.html",
    "relUrl": "/pages/team/team.html"
  }
}
